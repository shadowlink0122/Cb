// 構造体戻り値とN次元配列のリグレッションテスト
// このテストは今回の修正で対応した全機能が正常に動作することを保証します
//
// 対応機能:
// 1. 構造体戻り値代入 (points[2] = create_point(5, 6))
// 2. 構造体パラメータ関数呼び出し (add_coords(points[2]))
// 3. N次元配列リテラル代入 (matrix.data = [10, 20, 30, 40])
// 4. N次元配列アクセス (matrix.data[0][0], matrix.data[1][1])

struct Point {
    int x;
    int y;
};

struct Matrix2x2 {
    int[2][2] data;
    string name;
};

// 構造体配列要素を関数パラメータとして使用
int add_coords(Point p) {
    return p.x + p.y;
}

// 構造体を戻り値として使用
Point create_point(int x, int y) {
    Point result;
    result.x = x;
    result.y = y;
    return result;
}

int main() {
    // 1. 構造体配列要素のメンバーアクセス
    Point[3] points;
    points[0] = {1, 2};
    points[1] = {3, 4};

    for(tiny i = 0; i < 3; i++){
        println("points[%d] = [%d, %d]", i, points[i].x, points[i].y);
    }
    
    // 2. 構造体配列要素を関数パラメータとして使用
    int sum1 = add_coords(points[0]);
    int sum2 = add_coords(points[1]);
    
    // 3. 構造体戻り値を配列要素に代入
    points[2] = create_point(5, 6);
    int sum3 = add_coords(points[2]);
    
    // 4. 構造体の多次元配列メンバー
    Matrix2x2 matrix;
    matrix.name = "Test Matrix";
    
    // N次元配列リテラル代入
    matrix.data = [10, 20, 30, 40];
    
    println("Point sums:", sum1, sum2, sum3);
    println("Matrix name:", matrix.name);
    println("Matrix [0][0]:", matrix.data[0][0]);
    println("Matrix [1][1]:", matrix.data[1][1]);
    
    println("All tests completed successfully");
    
    return 0;
}
