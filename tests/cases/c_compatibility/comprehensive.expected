=== C Language Compatibility Test Suite ===

Section 1: Basic Member Access
--------------------------------
1.1 Dot operator (.):
  line.start.x = 10
  PASSED
1.2 Arrow operator (->):
  line.midpoint->x = 20
  PASSED
1.3 Pointer access:
  pshape->edge_count = 1
  PASSED

Section 2: Dereference with Member Access
------------------------------------------
2.1 (*ptr).member pattern:
  (*pshape).edge_count = 1
  PASSED
2.2 (*ptr).member.member pattern:
  (*pline).start.x = 10
  PASSED
2.3 (*ptr->member).member pattern:
  (*pshape->edges).start.x = 10
  PASSED
2.4 (*ptr->member).member.member pattern:
  (*pshape->edges).start.x = 10
  PASSED

Section 3: Arrow Operator Chains
---------------------------------
3.1 ptr->member->member pattern:
  pshape->edges->midpoint->x = 20
  PASSED
3.2 Three-level arrow chain:
  line.midpoint->x = 20
  PASSED

Section 4: Mixed Patterns
-------------------------
4.1 obj.ptr->member pattern:
  line.midpoint->x = 20
  PASSED
4.2 ptr->obj.member pattern:
  pshape->edges->start.x = 10
  PASSED
4.3 (*ptr).obj.ptr->member pattern:
  (*pshape->edges).midpoint->x = 20
  PASSED
4.4 ptr->ptr->obj.member pattern:
  ppshape->edges->start.x = 10
  PASSED

Section 5: Operator Precedence
-------------------------------
5.1 -> and . have same precedence (left-to-right):
  pshape->edges->start.x == (*pshape->edges).start.x
  PASSED
5.2 -> has higher precedence than *:
  (*pshape->edges).start.x means (*(pshape->edges)).start.x
  not (*pshape)->edges.start.x
  PASSED
5.3 Equivalent expressions:
  ptr->member == (*ptr).member
  PASSED

Section 6: Practical Patterns
-----------------------------
6.1 Linked-list style access:
  pp->x = 10
  PASSED
6.2 Complex nested read:
  Read via (*ptr->member).field.subfield
  PASSED

Section 7: Nested Struct Declaration Initialization
---------------------------------------------------
7.1 Direct initialization from member access:
  Point p_copy = line.start
  PASSED
7.2 Two-step initialization:
  Point p1 = line.start
  Point p2 = p1
  PASSED
7.3 Member access initialization:
  Point p_end = line.end
  PASSED
7.4 Chained initialization:
  Point p1 = line.start
  Point p2 = p1
  PASSED

=== All C Compatibility Tests Passed! ===
Total: 22 test cases
