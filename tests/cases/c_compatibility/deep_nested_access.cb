// Level 5以上の全アクセスパターン組み合わせテスト
// *, ->, . の3つの演算子を5段階以上ネストして検証

struct L5 { int x; string name; };
struct L4 { L5 val; L5* ptr; };
struct L3 { L4 val; L4* ptr; };
struct L2 { L3 val; L3* ptr; };
struct L1 { L2 val; L2* ptr; };
struct L0 { L1 val; L1* ptr; };

int main() {
    // 深い構造の初期化
    L5 leaf = {x: 100, name: "leaf"};
    L4 lv4 = {val: {x: 41, name: "lv4_val"}, ptr: &leaf};
    L3 lv3 = {val: {val: {x: 31, name: "lv3_val"}, ptr: &leaf}, ptr: &lv4};
    L2 lv2 = {val: {val: {val: {x: 21, name: "lv2_val"}, ptr: &leaf}, ptr: &lv4}, ptr: &lv3};
    L1 lv1 = {val: {val: {val: {val: {x: 11, name: "lv1_val"}, ptr: &leaf}, ptr: &lv4}, ptr: &lv3}, ptr: &lv2};
    L0 root = {val: lv1, ptr: &lv1};
    
    println("=== Level 5: 全ドットアクセス ===");
    println("1. root.val.val.val.val.val.x =", root.val.val.val.val.val.x);
    
    println("\n=== Level 5: ドット + アロー ===");
    println("2. root.val.val.val.val.ptr->x =", root.val.val.val.val.ptr->x);
    println("3. root.val.val.val.ptr->val.x =", root.val.val.val.ptr->val.x);
    println("4. root.val.val.ptr->val.val.x =", root.val.val.ptr->val.val.x);
    println("5. root.val.ptr->val.val.val.x =", root.val.ptr->val.val.val.x);
    println("6. root.ptr->val.val.val.val.x =", root.ptr->val.val.val.val.x);
    
    println("\n=== Level 5: 複数アロー ===");
    println("7. root.val.val.val.ptr->ptr->x =", root.val.val.val.ptr->ptr->x);
    println("8. root.val.val.ptr->ptr->val.x =", root.val.val.ptr->ptr->val.x);
    println("9. root.val.ptr->ptr->val.val.x =", root.val.ptr->ptr->val.val.x);
    println("10. root.ptr->ptr->val.val.val.x =", root.ptr->ptr->val.val.val.x);
    println("11. root.ptr->ptr->ptr->val.val.x =", root.ptr->ptr->ptr->val.val.x);
    println("12. root.ptr->ptr->ptr->ptr->val.x =", root.ptr->ptr->ptr->ptr->val.x);
    println("13. root.ptr->ptr->ptr->ptr->ptr->x =", root.ptr->ptr->ptr->ptr->ptr->x);
    
    println("\n=== Level 5: デリファレンス + ドット ===");
    L1* p1 = &lv1;
    println("14. (*p1).val.val.val.val.x =", (*p1).val.val.val.val.x);
    println("15. (*root.ptr).val.val.val.val.x =", (*root.ptr).val.val.val.val.x);
    
    println("\n=== Level 5: デリファレンス + アロー ===");
    println("16. (*p1).val.val.val.ptr->x =", (*p1).val.val.val.ptr->x);
    println("17. (*p1).val.val.ptr->val.x =", (*p1).val.val.ptr->val.x);
    println("18. (*p1).val.ptr->val.val.x =", (*p1).val.ptr->val.val.x);
    println("19. (*p1).ptr->val.val.val.x =", (*p1).ptr->val.val.val.x);
    println("20. (*p1).ptr->ptr->val.val.x =", (*p1).ptr->ptr->val.val.x);
    println("21. (*p1).ptr->ptr->ptr->val.x =", (*p1).ptr->ptr->ptr->val.x);
    println("22. (*p1).ptr->ptr->ptr->ptr->x =", (*p1).ptr->ptr->ptr->ptr->x);
    
    println("\n=== Level 5: 二重デリファレンス ===");
    L1** pp1 = &p1;
    println("23. (**pp1).val.val.val.val.x =", (**pp1).val.val.val.val.x);
    println("24. (**pp1).val.val.val.ptr->x =", (**pp1).val.val.val.ptr->x);
    println("25. (**pp1).val.val.ptr->val.x =", (**pp1).val.val.ptr->val.x);
    println("26. (**pp1).ptr->val.val.val.x =", (**pp1).ptr->val.val.val.x);
    println("27. (**pp1).ptr->ptr->val.val.x =", (**pp1).ptr->ptr->val.val.x);
    println("28. (**pp1).ptr->ptr->ptr->ptr->x =", (**pp1).ptr->ptr->ptr->ptr->x);
    
    println("\n=== Level 5: 三重デリファレンス ===");
    L1*** ppp1 = &pp1;
    println("29. (***ppp1).val.val.val.val.x =", (***ppp1).val.val.val.val.x);
    println("30. (***ppp1).val.val.ptr->val.x =", (***ppp1).val.val.ptr->val.x);
    println("31. (***ppp1).ptr->ptr->ptr->ptr->x =", (***ppp1).ptr->ptr->ptr->ptr->x);
    
    println("\n=== Level 5: デリファレンスとアローの混合 ===");
    L0* p0 = &root;
    println("32. (*p0).val.val.val.val.val.x =", (*p0).val.val.val.val.val.x);
    println("33. (*p0).ptr->val.val.val.val.x =", (*p0).ptr->val.val.val.val.x);
    println("34. (*p0).ptr->ptr->val.val.val.x =", (*p0).ptr->ptr->val.val.val.x);
    println("35. (*p0->ptr).val.val.val.val.x =", (*p0->ptr).val.val.val.val.x);
    println("36. (*p0->ptr).ptr->val.val.val.x =", (*p0->ptr).ptr->val.val.val.x);
    println("37. (*(*p0).ptr).val.val.val.val.x =", (*(*p0).ptr).val.val.val.val.x);
    println("38. (*(*p0).ptr).ptr->val.val.val.x =", (*(*p0).ptr).ptr->val.val.val.x);
    
    println("\n=== Level 6: さらに深いネスト ===");
    println("39. p0->val.val.val.val.val.val.x =", p0->val.val.val.val.val.val.x);
    println("40. p0->ptr->val.val.val.val.val.x =", p0->ptr->val.val.val.val.val.x);
    println("41. p0->ptr->ptr->val.val.val.val.x =", p0->ptr->ptr->val.val.val.val.x);
    println("42. p0->ptr->ptr->ptr->val.val.val.x =", p0->ptr->ptr->ptr->val.val.val.x);
    println("43. p0->ptr->ptr->ptr->ptr->val.val.x =", p0->ptr->ptr->ptr->ptr->val.val.x);
    println("44. p0->ptr->ptr->ptr->ptr->ptr->val.x =", p0->ptr->ptr->ptr->ptr->ptr->val.x);
    println("45. p0->ptr->ptr->ptr->ptr->ptr->ptr->x =", p0->ptr->ptr->ptr->ptr->ptr->ptr->x);
    
    println("\n=== Level 6: デリファレンスとアローの深いネスト ===");
    println("46. (*p0).ptr->ptr->ptr->ptr->ptr->x =", (*p0).ptr->ptr->ptr->ptr->ptr->x);
    println("47. (*p0->ptr).ptr->ptr->ptr->ptr->x =", (*p0->ptr).ptr->ptr->ptr->ptr->x);
    println("48. (*(*p0).ptr).ptr->ptr->ptr->ptr->x =", (*(*p0).ptr).ptr->ptr->ptr->ptr->x);
    
    println("\n=== Level 5: 代入テスト ===");
    root.ptr->ptr->ptr->ptr->ptr->x = 999;
    println("49. After ptr->ptr->ptr->ptr->ptr->x = 999: leaf.x =", leaf.x);
    
    (*p0).ptr->ptr->ptr->ptr->x = 888;
    println("50. After (*p0).ptr->ptr->ptr->ptr->x = 888: leaf.x =", leaf.x);
    
    p0->val.val.val.val.val.x = 777;
    println("51. After p0->val.val.val.val.val.x = 777: root.val.val.val.val.val.x =", root.val.val.val.val.val.x);
    
    println("\n=== Level 5: 複合代入テスト ===");
    root.ptr->ptr->ptr->ptr->ptr->x += 12;
    println("52. After +=12: leaf.x =", leaf.x);
    
    (*p0).ptr->ptr->ptr->ptr->x *= 2;
    println("53. After *=2: leaf.x =", leaf.x);
    
    p0->ptr->ptr->ptr->ptr->ptr->x -= 300;
    println("54. After -=300: leaf.x =", leaf.x);
    
    println("\n=== 文字列アクセステスト ===");
    println("55. root.val.val.val.val.val.name =", root.val.val.val.val.val.name);
    println("56. root.ptr->ptr->ptr->ptr->ptr->name =", root.ptr->ptr->ptr->ptr->ptr->name);
    println("57. (*p0).ptr->ptr->ptr->ptr->name =", (*p0).ptr->ptr->ptr->ptr->name);
    
    println("\n=== 文字列代入テスト ===");
    root.ptr->ptr->ptr->ptr->ptr->name = "modified";
    println("58. After string assignment: leaf.name =", leaf.name);
    
    int success_count = 0;
    int total_tests = 58;
    
    if (leaf.x == 1600 && leaf.name == "modified" && root.val.val.val.val.val.x == 777) {
        println("\n✅ 全", total_tests, "個のLevel 5+テストが成功しました！");
        success_count = total_tests;
    } else {
        println("\n❌ 一部のテストが失敗しました");
        println("leaf.x =", leaf.x, "(expected: 1600)");
        println("leaf.name =", leaf.name, "(expected: modified)");
        println("root.val.val.val.val.val.x =", root.val.val.val.val.val.x, "(expected: 777)");
    }
    
    return 0;
}
