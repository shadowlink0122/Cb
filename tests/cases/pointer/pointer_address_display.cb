// ポインタのアドレス値表示とデータ遷移の詳細テスト

int main() {
    println("=== Pointer Address and Value Transition Tests ===");
    println("");
    
    // テスト1: アドレス値の表示
    println("Test 1: Address Display");
    int[5] arr = [10, 20, 30, 40, 50];
    int* p = &arr[0];
    
    println("  Array base: &arr[0] =", &arr[0]);
    println("  Pointer p =", p);
    println("  Value *p =", *p);
    println("");
    
    // テスト2: ポインタ加算とアドレス遷移
    println("Test 2: Pointer Arithmetic and Address Transition");
    println("  Initial: p =", p, ", *p =", *p);
    
    p = p + 1;
    println("  After p+1: p =", p, ", *p =", *p);
    
    p = p + 1;
    println("  After p+1: p =", p, ", *p =", *p);
    
    p = p + 1;
    println("  After p+1: p =", p, ", *p =", *p);
    println("");
    
    // テスト3: ポインタ減算とアドレス遷移
    println("Test 3: Pointer Subtraction");
    println("  Before: p =", p, ", *p =", *p);
    
    p = p - 1;
    println("  After p-1: p =", p, ", *p =", *p);
    
    p = p - 2;
    println("  After p-2: p =", p, ", *p =", *p);
    println("");
    
    // テスト4: 複数ポインタの比較
    println("Test 4: Multiple Pointers Comparison");
    int* p1 = &arr[0];
    int* p2 = &arr[2];
    int* p3 = &arr[4];
    
    println("  p1 =", p1, ", *p1 =", *p1);
    println("  p2 =", p2, ", *p2 =", *p2);
    println("  p3 =", p3, ", *p3 =", *p3);
    println("");
    
    // テスト5: インクリメント/デクリメント
    println("Test 5: Increment/Decrement Operations");
    int* q = &arr[2];
    println("  Initial q =", q, ", *q =", *q);
    
    q++;
    println("  After q++: q =", q, ", *q =", *q);
    
    q++;
    println("  After q++: q =", q, ", *q =", *q);
    
    q--;
    println("  After q--: q =", q, ", *q =", *q);
    println("");
    
    // テスト6: ポインタ変数自身のアドレス
    println("Test 6: Address of Pointer Variable");
    println("  Pointer value: p =", p);
    println("  Address of pointer: &p =", &p);
    println("  Value pointed to: *p =", *p);
    println("");
    
    println("=== All Address Display Tests Completed ===");
    return 0;
}
