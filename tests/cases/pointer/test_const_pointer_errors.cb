// constポインタのエラーテスト
// これらのテストは意図的にエラーを発生させます

struct Point {
    int x;
    int y;
};

void test_pointee_const_error() {
    println("=== Test: Cannot modify through pointer to const ===");
    int x = 10;
    const int* ptr = &x;
    
    // エラー: const T* 経由では値を変更できない
    *ptr = 20;  // This should fail
}

void test_pointer_const_error() {
    println("=== Test: Cannot reassign const pointer ===");
    int a = 30;
    int b = 40;
    
    int* const ptr = &a;
    
    // エラー: T* const 自体は変更できない
    ptr = &b;  // This should fail
}

void test_both_const_value_error() {
    println("=== Test: Cannot modify through const pointer to const ===");
    int x = 50;
    const int* const ptr = &x;
    
    // エラー: const T* const 経由では値を変更できない
    *ptr = 60;  // This should fail
}

void test_both_const_pointer_error() {
    println("=== Test: Cannot reassign const pointer to const ===");
    int a = 70;
    int b = 80;
    
    const int* const ptr = &a;
    
    // エラー: const T* const 自体も変更できない
    ptr = &b;  // This should fail
}

void test_struct_pointee_const_error() {
    println("=== Test: Cannot modify struct through pointer to const ===");
    Point p;
    p.x = 100;
    p.y = 200;
    
    const Point* ptr = &p;
    
    // エラー: const Point* 経由ではメンバーを変更できない
    ptr->x = 150;  // This should fail
}

void test_struct_pointer_const_error() {
    println("=== Test: Cannot reassign const pointer to struct ===");
    Point p1;
    Point p2;
    p1.x = 10;
    p2.x = 20;
    
    Point* const ptr = &p1;
    
    // エラー: Point* const 自体は変更できない
    ptr = &p2;  // This should fail
}

void main() {
    println("Testing const pointer error cases...");
    println("Each test should produce an error:");
    println("");
    
    // コメントアウトして1つずつテスト
    // test_pointee_const_error();
    // test_pointer_const_error();
    // test_both_const_value_error();
    // test_both_const_pointer_error();
    // test_struct_pointee_const_error();
    test_struct_pointer_const_error();
    
    println("If you see this, the error was not caught!");
}
