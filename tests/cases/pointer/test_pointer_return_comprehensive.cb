// ポインタ型を返す関数のテスト

int* returnPointer(int* ptr) {
    return ptr;
}

int* getPointerToMax(int* a, int* b) {
    if (*a > *b) {
        return a;
    } else {
        return b;
    }
}

int* allocateAndInit(int* storage, int value) {
    *storage = value;
    return storage;
}

int** returnDoublePointer(int** pp) {
    return pp;
}

void modifyViaPointer(int* ptr, int newValue) {
    *ptr = newValue;
}

int main() {
    println("=== Pointer Return Function Tests ===");
    println("");
    
    // Test 1: 基本的なポインタの返却
    println("Test 1: Basic pointer return");
    int x = 42;
    int* px = &x;
    int* result = returnPointer(px);
    
    println("x = %d, *result = %d", x, *result);
    assert(*result == 42);
    
    *result = 100;
    println("After *result = 100: x = %d", x);
    assert(x == 100);
    println("");
    
    // Test 2: 条件によって異なるポインタを返す
    println("Test 2: Conditional pointer return");
    int a = 50;
    int b = 30;
    
    int* max_ptr = getPointerToMax(&a, &b);
    println("a = %d, b = %d", a, b);
    println("max via pointer = %d", *max_ptr);
    assert(*max_ptr == 50);
    
    *max_ptr = 999;
    println("After *max_ptr = 999: a = %d, b = %d", a, b);
    assert(a == 999);
    println("");
    
    // Test 3: ポインタを受け取り、初期化して返す
    println("Test 3: Allocate and initialize");
    int storage = 0;
    println("Before: storage = %d", storage);
    
    int* initialized = allocateAndInit(&storage, 777);
    println("After allocateAndInit: storage = %d", storage);
    println("*initialized = %d", *initialized);
    assert(storage == 777);
    assert(*initialized == 777);
    println("");
    
    // Test 4: ダブルポインタの返却
    println("Test 4: Double pointer return");
    int value = 123;
    int* pv = &value;
    int** ppv = &pv;
    
    int** result_pp = returnDoublePointer(ppv);
    println("value = %d", value);
    println("**result_pp = %d", **result_pp);
    assert(**result_pp == 123);
    
    **result_pp = 456;
    println("After **result_pp = 456: value = %d", value);
    assert(value == 456);
    println("");
    
    // Test 5: void関数でポインタ経由の変更
    println("Test 5: Void function modifying via pointer");
    int target = 10;
    println("Before: target = %d", target);
    
    modifyViaPointer(&target, 20);
    println("After modifyViaPointer(&target, 20): target = %d", target);
    assert(target == 20);
    println("");
    
    // Test 6: 関数チェーン
    println("Test 6: Function chain with pointers");
    int original = 5;
    int* p1 = returnPointer(&original);
    int* p2 = returnPointer(p1);
    
    println("original = %d, *p1 = %d, *p2 = %d", original, *p1, *p2);
    
    *p2 = 15;
    println("After *p2 = 15: original = %d", original);
    assert(original == 15);
    println("");
    
    println("All pointer return function tests passed!");
    return 0;
}
