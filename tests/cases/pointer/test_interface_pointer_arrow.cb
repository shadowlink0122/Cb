// Interface型ポインタとアロー演算子の包括的なテスト

interface Shape {
    int get_value();
    void set_value(int val);
    int calculate(int factor);
};

struct Circle {
    int radius;
};

impl Shape for Circle {
    int get_value() {
        return self.radius;
    }
    
    void set_value(int val) {
        self.radius = val;
    }
    
    int calculate(int factor) {
        return self.radius * factor;
    }
};

struct Square {
    int side;
};

impl Shape for Square {
    int get_value() {
        return self.side;
    }
    
    void set_value(int val) {
        self.side = val;
    }
    
    int calculate(int factor) {
        return self.side * self.side * factor;
    }
};

int main() {
    println("=== Interface Pointer with Arrow Operator Test ===");
    
    // Test 1: 基本的なアロー演算子（現在は(*ptr).method()形式を使用）
    println("");
    println("Test 1: Basic arrow operator with interface pointer");
    Circle c = {radius: 10};
    Shape* ps = &c;
    
    println("Using (*ps).get_value():");
    println((*ps).get_value());  // 10
    
    println("Using (*ps).get_value() (arrow operator not yet supported in expressions):");
    println((*ps).get_value());  // 10
    
    println("✓ Test 1 passed");
    
    // Test 2: アロー演算子でメソッド呼び出し（現在は(*ptr).method()形式を使用）
    println("");
    println("Test 2: Method call with arguments");
    println("(*ps).calculate(3):");
    println((*ps).calculate(3));  // 30 (10 * 3)
    
    println("(*ps).calculate(5):");
    println((*ps).calculate(5));  // 50 (10 * 5)
    
    println("✓ Test 2 passed");
    
    // Test 3: アロー演算子で値を変更（現在は(*ptr).method()形式を使用）
    println("");
    println("Test 3: Modify value through arrow operator");
    (*ps).set_value(20);
    println("After (*ps).set_value(20):");
    println((*ps).get_value());  // 20
    println(c.radius);  // 20
    
    (*ps).set_value(30);
    println("After (*ps).set_value(30):");
    println((*ps).get_value());  // 30
    println("✓ Test 3 passed");
    
    // Test 4: ポインタの再代入
    println("");
    println("Test 4: Pointer reassignment");
    Square s = {side: 5};
    ps = &s;
    
    println("After ps = &s:");
    println("(*ps).get_value():");
    println((*ps).get_value());  // 5
    
    println("(*ps).calculate(2):");
    println((*ps).calculate(2));  // 50 (5 * 5 * 2)
    
    println("✓ Test 4 passed");
    
    // Test 5: 複数のInterface型ポインタ
    println("");
    println("Test 5: Multiple interface pointers");
    Circle c2 = {radius: 15};
    Square s2 = {side: 8};
    
    Shape* p1 = &c2;
    Shape* p2 = &s2;
    
    println("(*p1).get_value():");
    println((*p1).get_value());  // 15
    println("(*p2).get_value():");
    println((*p2).get_value());  // 8
    
    (*p1).set_value(25);
    (*p2).set_value(10);
    
    println("After modifications:");
    println("(*p1).get_value():");
    println((*p1).get_value());  // 25
    println("(*p2).get_value():");
    println((*p2).get_value());  // 10
    
    println("✓ Test 5 passed");
    
    // Test 6: 連続したInterface型ポインタの使用
    println("");
    println("Test 6: Sequential interface pointer usage");
    Circle c1 = {radius: 1};
    Circle c2a = {radius: 2};
    Circle c3 = {radius: 3};
    
    Shape* ptr_a = &c1;
    Shape* ptr_b = &c2a;
    Shape* ptr_c = &c3;
    
    println("Sequential interface pointers:");
    println((*ptr_a).get_value());  // 1
    println((*ptr_b).get_value());  // 2
    println((*ptr_c).get_value());  // 3
    
    println("✓ Test 6 passed");
    
    println("");
    println("=== All interface pointer arrow operator tests passed ===");
    
    return 0;
}
