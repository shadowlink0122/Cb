// implブロック内での包括的なポインタ操作テスト

struct DataProcessor {
    int multiplier;
}

impl DataProcessor {
    // テスト1: 基本的なポインタ操作
    int test_basic_operations() {
        int[5] data = [1, 2, 3, 4, 5];
        int* p = &data[0];
        
        int sum = 0;
        int i = 0;
        while (i < 5) {
            sum = sum + *p;
            p = p + 1;
            i = i + 1;
        }
        
        return sum;  // 期待値: 15
    }
    
    // テスト2: ポインタを使った配列要素の変更
    int test_modification() {
        int[3] values = [10, 20, 30];
        int* p = &values[1];
        
        *p = *p * multiplier;  // values[1] を multiplier 倍
        
        return values[1];
    }
    
    // テスト3: 複数ポインタの同時操作
    int test_multiple_pointers() {
        int[4] arr = [100, 200, 300, 400];
        int* p1 = &arr[0];
        int* p2 = &arr[2];
        
        int diff = *p2 - *p1;  // 300 - 100 = 200
        
        p1 = p1 + 1;  // p1 -> arr[1]
        p2 = p2 + 1;  // p2 -> arr[3]
        
        diff = diff + (*p2 - *p1);  // 200 + (400 - 200) = 400
        
        return diff;
    }
    
    // テスト4: アドレス値の調査
    int test_address_values() {
        int[3] nums = [7, 8, 9];
        int* p = &nums[0];
        
        // ポインタが正しい値を指しているか確認
        if (*p != 7) {
            return -1;
        }
        
        p++;
        if (*p != 8) {
            return -2;
        }
        
        p++;
        if (*p != 9) {
            return -3;
        }
        
        // 逆方向
        p = p - 1;
        if (*p != 8) {
            return -4;
        }
        
        p = p - 1;
        if (*p != 7) {
            return -5;
        }
        
        return 0;  // 成功
    }
    
    // テスト5: ポインタを使った最大値検索
    int find_max_value() {
        int[6] data = [45, 12, 89, 34, 67, 23];
        int* p = &data[0];
        
        int max = *p;
        int i = 1;
        
        while (i < 6) {
            p = p + 1;
            if (*p > max) {
                max = *p;
            }
            i = i + 1;
        }
        
        return max;  // 期待値: 89
    }
    
    // テスト6: ポインタを使った配列の反転
    int test_array_reversal() {
        int[5] arr = [1, 2, 3, 4, 5];
        int* left = &arr[0];
        int* right = &arr[4];
        
        int i = 0;
        while (i < 2) {
            int temp = *left;
            *left = *right;
            *right = temp;
            
            left = left + 1;
            right = right - 1;
            i = i + 1;
        }
        
        // 反転後: [5, 4, 3, 2, 1]
        // 検証: arr[0] + arr[4] = 5 + 1 = 6
        return arr[0] + arr[4];
    }
}

int main() {
    println("=== Impl Block Pointer Tests ===");
    println("");
    
    DataProcessor dp;
    dp.multiplier = 3;
    
    // テスト1: 基本操作
    println("Test 1: Basic Operations");
    int sum = dp.test_basic_operations();
    if (sum != 15) {
        println("FAIL: Expected 15, got", sum);
        return 1;
    }
    println("  PASS: Sum =", sum);
    
    // テスト2: 変更操作
    println("Test 2: Modification");
    int modified = dp.test_modification();
    if (modified != 60) {  // 20 * 3
        println("FAIL: Expected 60, got", modified);
        return 1;
    }
    println("  PASS: Modified value =", modified);
    
    // テスト3: 複数ポインタ
    println("Test 3: Multiple Pointers");
    int diff = dp.test_multiple_pointers();
    if (diff != 400) {
        println("FAIL: Expected 400, got", diff);
        return 1;
    }
    println("  PASS: Difference =", diff);
    
    // テスト4: アドレス値調査
    println("Test 4: Address Investigation");
    int addr_result = dp.test_address_values();
    if (addr_result != 0) {
        println("FAIL: Error code", addr_result);
        return 1;
    }
    println("  PASS: All address checks passed");
    
    // テスト5: 最大値検索
    println("Test 5: Find Max Value");
    int max_val = dp.find_max_value();
    if (max_val != 89) {
        println("FAIL: Expected 89, got", max_val);
        return 1;
    }
    println("  PASS: Max value =", max_val);
    
    // テスト6: 配列反転
    println("Test 6: Array Reversal");
    int reversal_sum = dp.test_array_reversal();
    if (reversal_sum != 6) {
        println("FAIL: Expected 6, got", reversal_sum);
        return 1;
    }
    println("  PASS: Reversal sum =", reversal_sum);
    
    println("");
    println("=== All Impl Block Tests Passed ===");
    return 0;
}
