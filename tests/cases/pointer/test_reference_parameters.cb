// 参照引数（ポインタ引数）によるスコープ外変数の変更テスト

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void increment(int* value) {
    (*value)++;
}

void multiplyBy(int* value, int factor) {
    *value = *value * factor;
}

void updateMultiple(int* x, int* y, int* z) {
    *x = *x + 10;
    *y = *y + 20;
    *z = *z + 30;
}

void setToZero(int* ptr) {
    *ptr = 0;
}

void modifyArray(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        int* elem = arr + i;
        *elem = *elem * 2;
    }
}

struct Point {
    int x;
    int y;
};;

void movePoint(Point* p, int dx, int dy) {
    (*p).x = (*p).x + dx;
    (*p).y = (*p).y + dy;
}

int main() {
    println("=== Reference Parameter Tests ===");
    println("");
    
    // Test 1: swap関数
    println("Test 1: Swap via pointer parameters");
    int a = 10;
    int b = 20;
    
    println("Before: a = %d, b = %d", a, b);
    swap(&a, &b);
    println("After swap: a = %d, b = %d", a, b);
    assert(a == 20);
    assert(b == 10);
    println("");
    
    // Test 2: インクリメント関数
    println("Test 2: Increment via pointer");
    int count = 0;
    println("Before: count = %d", count);
    
    increment(&count);
    println("After 1st increment: count = %d", count);
    assert(count == 1);
    
    increment(&count);
    println("After 2nd increment: count = %d", count);
    assert(count == 2);
    
    increment(&count);
    println("After 3rd increment: count = %d", count);
    assert(count == 3);
    println("");
    
    // Test 3: 乗算関数
    println("Test 3: Multiply via pointer");
    int value = 5;
    println("Before: value = %d", value);
    
    multiplyBy(&value, 3);
    println("After multiplyBy(&value, 3): value = %d", value);
    assert(value == 15);
    
    multiplyBy(&value, 2);
    println("After multiplyBy(&value, 2): value = %d", value);
    assert(value == 30);
    println("");
    
    // Test 4: 複数変数の同時更新
    println("Test 4: Update multiple variables");
    int x = 1;
    int y = 2;
    int z = 3;
    
    println("Before: x = %d, y = %d, z = %d", x, y, z);
    updateMultiple(&x, &y, &z);
    println("After: x = %d, y = %d, z = %d", x, y, z);
    assert(x == 11);
    assert(y == 22);
    assert(z == 33);
    println("");
    
    // Test 5: ゼロにセット
    println("Test 5: Set to zero");
    int nonzero = 999;
    println("Before: nonzero = %d", nonzero);
    
    setToZero(&nonzero);
    println("After setToZero: nonzero = %d", nonzero);
    assert(nonzero == 0);
    println("");
    
    // Test 6: 配列の変更
    println("Test 6: Modify array via pointer");
    int[5] arr = [1, 2, 3, 4, 5];
    println("Before: arr = [%d, %d, %d, %d, %d}", arr[0], arr[1], arr[2], arr[3], arr[4]);
    
    modifyArray(&arr[0], 5);
    println("After: arr = [%d, %d, %d, %d, %d}", arr[0], arr[1], arr[2], arr[3], arr[4]);
    assert(arr[0] == 2);
    assert(arr[1] == 4);
    assert(arr[2] == 6);
    assert(arr[3] == 8);
    assert(arr[4] == 10);
    println("");
    
    // Test 7: 構造体の変更
    println("Test 7: Modify struct via pointer");
    Point p = [x: 10, y: 20];
    println("Before: p = [x: %d, y: %d}", p.x, p.y);
    
    movePoint(&p, 5, -3);
    println("After movePoint(&p, 5, -3): p = [x: %d, y: %d}", p.x, p.y);
    assert(p.x == 15);
    assert(p.y == 17);
    
    movePoint(&p, -5, 3);
    println("After movePoint(&p, -5, 3): p = [x: %d, y: %d}", p.x, p.y);
    assert(p.x == 10);
    assert(p.y == 20);
    println("");
    
    // Test 8: ネストした関数呼び出し
    println("Test 8: Nested function calls with pointer");
    int nested_value = 100;
    println("Before: nested_value = %d", nested_value);
    
    increment(&nested_value);
    println("After 1st increment: nested_value = %d", nested_value);
    
    multiplyBy(&nested_value, 2);
    println("After multiplyBy 2: nested_value = %d", nested_value);
    
    increment(&nested_value);
    println("After 2nd increment: nested_value = %d", nested_value);
    
    assert(nested_value == 203);
    println("");
    
    println("All reference parameter tests passed!");
    return 0;
}
