// ネストしたポインタアクセスのテスト（自己参照なし）

struct Inner {
    int value;
};

struct Middle {
    Inner* inner_ptr;
    int count;
};

struct Outer {
    Middle* middle_ptr;
};

int main() {
    println("=== Nested Pointer Access Test ===");
    println("");
    
    // Test 1: 2段階のポインタアクセス
    println("Test 1: Two-level pointer access");
    Inner inner = {value: 100};
    Middle middle = {inner_ptr: &inner, count: 5};
    Outer outer = {middle_ptr: &middle};
    
    Outer* po = &outer;
    
    // 構造体ポインタのメンバがポインタの場合
    println("Using (*po).middle_ptr->inner_ptr->value:");
    println((*po).middle_ptr->inner_ptr->value);  // 100
    
    println("Using po->middle_ptr->inner_ptr->value:");
    println(po->middle_ptr->inner_ptr->value);  // 100
    
    println("✓ Test 1 passed");
    println("");
    
    // Test 2: ポインタメンバの更新
    println("Test 2: Update through nested pointers");
    po->middle_ptr->inner_ptr->value = 200;
    println("After po->middle_ptr->inner_ptr->value = 200:");
    println(inner.value);  // 200
    
    println("✓ Test 2 passed");
    println("");
    
    // Test 3: 中間レベルへのアクセス
    println("Test 3: Middle-level access");
    println("po->middle_ptr->count:");
    println(po->middle_ptr->count);  // 5
    
    po->middle_ptr->count = 10;
    println("After po->middle_ptr->count = 10:");
    println(middle.count);  // 10
    
    println("✓ Test 3 passed");
    println("");
    
    println("=== All nested pointer access tests passed ===");
    
    return 0;
}
