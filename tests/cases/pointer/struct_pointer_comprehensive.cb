// 構造体ポインタの包括的なテスト

struct Point {
    int x;
    int y;
}

struct Circle {
    Point center;
    int radius;
}

int main() {
    // テスト1: 構造体変数へのポインタ
    Point p1;
    p1.x = 10;
    p1.y = 20;
    
    Point* ptr = &p1;
    
    // ポインタ経由でのメンバーアクセス（間接参照）
    if ((*ptr).x != 10) {
        println("FAIL: Test 1 - Struct pointer member access x");
        return 1;
    }
    if ((*ptr).y != 20) {
        println("FAIL: Test 1 - Struct pointer member access y");
        return 1;
    }
    
    // テスト2: ポインタ経由での値の変更
    (*ptr).x = 100;
    (*ptr).y = 200;
    
    if (p1.x != 100) {
        println("FAIL: Test 2 - Modified x through pointer");
        return 1;
    }
    if (p1.y != 200) {
        println("FAIL: Test 2 - Modified y through pointer");
        return 1;
    }
    
    // テスト3: ネストした構造体へのポインタ
    Circle c1;
    c1.center.x = 50;
    c1.center.y = 75;
    c1.radius = 100;
    
    Circle* cptr = &c1;
    
    if ((*cptr).center.x != 50) {
        println("FAIL: Test 3 - Nested struct pointer access center.x");
        return 1;
    }
    if ((*cptr).center.y != 75) {
        println("FAIL: Test 3 - Nested struct pointer access center.y");
        return 1;
    }
    if ((*cptr).radius != 100) {
        println("FAIL: Test 3 - Nested struct pointer access radius");
        return 1;
    }
    
    // テスト4: ネストした構造体の変更
    (*cptr).center.x = 150;
    (*cptr).radius = 250;
    
    if (c1.center.x != 150) {
        println("FAIL: Test 4 - Modified nested struct center.x");
        return 1;
    }
    if (c1.radius != 250) {
        println("FAIL: Test 4 - Modified nested struct radius");
        return 1;
    }
    
    println("PASS: All struct pointer tests");
    return 0;
}
