// 文字列を扱うinterfaceテスト

struct TextProcessor {
    string text;
    int length;
};

interface StringOperations {
    string getText();
    string[3] split();
    TextProcessor append(string suffix);
    int getLength();
};

impl StringOperations for TextProcessor {
    string getText() {
        return self.text;
    }
    
    string[3] split() {
        // 簡単な分割シミュレーション
        string[3] parts;
        parts[0] = "Hello";
        parts[1] = "World";
        parts[2] = "Test";
        return parts;
    }
    
    TextProcessor append(string suffix) {
        // 実際の文字列結合はサポートされていないため、固定値を設定
        self.text = "HelloWorldAppended";
        self.length = 18;
        return self;
    }
    
    int getLength() {
        return self.length;
    }
};

int main() {
    TextProcessor processor = {"HelloWorld", 10};
    StringOperations strOps = processor;
    
    // 元のテキストを取得
    string original = strOps.getText();
    println(original);
    
    // 長さを取得
    int len = strOps.getLength();
    println(len);
    
    // 分割結果を取得
    string[3] parts = strOps.split();
    println(parts[0]);
    println(parts[1]);
    println(parts[2]);
    
    // 追加操作
    TextProcessor result = strOps.append("Suffix");
    string newText = result.text;
    println(newText);
    int newLen = result.length;
    println(newLen);
    
    return 0;
}
