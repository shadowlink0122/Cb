// interface/implでのself経由の複雑な構造体メンバアクセステスト

struct Point {
    int x;
    int y;
};

struct Box {
    Point topLeft;
    Point bottomRight;
    int[3] dimensions;  // width, height, depth
    string label;
};

interface Geometry {
    int getArea();
    int getVolume();
    void moveBy(int dx, int dy);
    void scale(int factor);
    string getLabel();
};

impl Geometry for Box {
    int getArea() {
        // ネストした構造体メンバへのアクセス
        int width = self.bottomRight.x - self.topLeft.x;
        int height = self.bottomRight.y - self.topLeft.y;
        return width * height;
    }
    
    int getVolume() {
        // 配列メンバへのアクセス
        return self.dimensions[0] * self.dimensions[1] * self.dimensions[2];
    }
    
    void moveBy(int dx, int dy) {
        // ネストした構造体メンバへの複合代入
        self.topLeft.x += dx;
        self.topLeft.y += dy;
        self.bottomRight.x += dx;
        self.bottomRight.y += dy;
    }
    
    void scale(int factor) {
        // 配列メンバへの複合代入
        self.dimensions[0] *= factor;
        self.dimensions[1] *= factor;
        self.dimensions[2] *= factor;
    }
    
    string getLabel() {
        // 文字列メンバへのアクセス
        return self.label;
    }
};

int main() {
    println("=== Test 1: Nested struct member access via self ===");
    Box box1;
    box1.topLeft.x = 10;
    box1.topLeft.y = 20;
    box1.bottomRight.x = 50;
    box1.bottomRight.y = 60;
    box1.dimensions[0] = 40;  // width
    box1.dimensions[1] = 40;  // height
    box1.dimensions[2] = 30;  // depth
    box1.label = "TestBox";

    int area = box1.getArea();
    println("Area (via self nested access):");
    println(area);  // Expected: (50-10) * (60-20) = 40 * 40 = 1600

    println("");
    println("=== Test 2: Array member access via self ===");
    int volume = box1.getVolume();
    println("Volume (via self array access):");
    println(volume);  // Expected: 40 * 40 * 30 = 48000

    println("");
    println("=== Test 3: String member access via self ===");
    string label = box1.getLabel();
    println("Label:");
    println(label);  // Expected: TestBox

    println("");
    println("=== Test 4: Compound assignment on nested members via self ===");
    println("Before move:");
    println(box1.topLeft.x);
    println(box1.topLeft.y);
    println(box1.bottomRight.x);
    println(box1.bottomRight.y);
    box1.moveBy(5, 10);
    println("After move (+5,+10):");
    println(box1.topLeft.x);
    println(box1.topLeft.y);
    println(box1.bottomRight.x);
    println(box1.bottomRight.y);
    // Expected: 15, 30, 55, 70

    println("");
    println("=== Test 5: Compound assignment on array members via self ===");
    println("Before scale:");
    println(box1.dimensions[0]);
    println(box1.dimensions[1]);
    println(box1.dimensions[2]);
    box1.scale(2);
    println("After scale (*2):");
    println(box1.dimensions[0]);
    println(box1.dimensions[1]);
    println(box1.dimensions[2]);
    // Expected: 80, 80, 60

    int newVolume = box1.getVolume();
    println("New volume:");
    println(newVolume);  // Expected: 80 * 80 * 60 = 384000

    println("");
    println("=== All complex struct self access tests passed! ===");
    
    return 0;
}
