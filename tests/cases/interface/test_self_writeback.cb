// selfメンバーへの書き込みが元の構造体に反映されるかのテスト

struct Point {
    int x;
    int y;
};

struct Box {
    Point center;
    int width;
};

interface Movable {
    void moveBy(int dx, int dy);
    void resize(int newWidth);
};

impl Movable for Box {
    void moveBy(int dx, int dy) {
        println("Moving box...");
        self.center.x = self.center.x + dx;
        self.center.y = self.center.y + dy;
        println("Moved center.x to:");
        println(self.center.x);
        println("Moved center.y to:");
        println(self.center.y);
    }
    
    void resize(int newWidth) {
        println("Resizing box...");
        self.width = newWidth;
        println("New width:");
        println(self.width);
    }
};

int main() {
    Box box;
    box.center.x = 100;
    box.center.y = 200;
    box.width = 50;
    
    println("=== Initial state ===");
    println("box.center.x:");
    println(box.center.x);
    println("box.center.y:");
    println(box.center.y);
    println("box.width:");
    println(box.width);
    println("");
    
    println("=== Calling moveBy(10, 20) ===");
    box.moveBy(10, 20);
    println("");
    
    println("=== After moveBy - checking original box ===");
    println("box.center.x:");
    println(box.center.x);
    println("box.center.y:");
    println(box.center.y);
    println("");
    
    println("=== Calling resize(75) ===");
    box.resize(75);
    println("");
    
    println("=== After resize - checking original box ===");
    println("box.width:");
    println(box.width);
    
    return 0;
}
