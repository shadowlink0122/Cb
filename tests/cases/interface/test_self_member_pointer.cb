// self のメンバーがポインタの場合のテスト

struct Point {
    int x;
    int y;
};

struct Container {
    int id;
    Point* data;  // ポインタメンバー
};

interface DataProcessor {
    int getDataX();
    void setDataX(int newX);
    int getId();
};

impl DataProcessor for Container {
    int getId() {
        println("Getting id from self:");
        println(self.id);
        return self.id;
    }
    
    int getDataX() {
        println("Getting data.x via self.data->x:");
        // self.data はポインタなので、self.data->x でアクセス
        int x;
        x = self.data->x;
        println(x);
        return x;
    }
    
    void setDataX(int newX) {
        println("Setting data.x to:");
        println(newX);
        // self.data はポインタなので、self.data->x でアクセス
        self.data->x = newX;
    }
};

int main() {
    Point p;
    p.x = 100;
    p.y = 200;
    
    Container c;
    c.id = 42;
    c.data = &p;
    
    println("=== Initial state ===");
    println("c.id:");
    println(c.id);
    println("p.x:");
    println(p.x);
    println("Via c.data->x:");
    println(c.data->x);
    println("");
    
    println("=== Test 1: getId() ===");
    int id;
    id = c.getId();
    println("Returned id:");
    println(id);
    println("");
    
    println("=== Test 2: getDataX() ===");
    int x;
    x = c.getDataX();
    println("Returned x:");
    println(x);
    println("");
    
    println("=== Test 3: setDataX(150) ===");
    c.setDataX(150);
    println("After set, p.x:");
    println(p.x);
    println("Via c.data->x:");
    println(c.data->x);
    
    return 0;
}
