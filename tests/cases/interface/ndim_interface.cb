// 構造体を使わない多次元配列interfaceテスト

struct SimpleProcessor {
    int result;
};

interface NDArrayProcessor {
    int process2D(int[2][2] arr);
    int process3D(int[2][2][2] arr);
    int process4D(int[2][2][2][2] arr);
    int process5D(int[2][2][2][2][2] arr);
    SimpleProcessor analyze(int[3][3] matrix);
};

impl NDArrayProcessor for SimpleProcessor {
    int process2D(int[2][2] arr) {
        return arr[0][0] + arr[0][1] + arr[1][0] + arr[1][1];
    }
    
    int process3D(int[2][2][2] arr) {
        int sum = 0;
        int i = 0;
        while (i < 2) {
            int j = 0;
            while (j < 2) {
                int k = 0;
                while (k < 2) {
                    sum = sum + arr[i][j][k];
                    k = k + 1;
                }
                j = j + 1;
            }
            i = i + 1;
        }
        return sum;
    }
    
    int process4D(int[2][2][2][2] arr) {
        return arr[0][0][0][0] + arr[1][1][1][1];  // 簡略化
    }
    
    int process5D(int[2][2][2][2][2] arr) {
        return arr[0][0][0][0][0] + arr[1][1][1][1][1];  // 簡略化
    }
    
    SimpleProcessor analyze(int[3][3] matrix) {
        int sum = 0;
        int i = 0;
        while (i < 3) {
            int j = 0;
            while (j < 3) {
                sum = sum + matrix[i][j];
                j = j + 1;
            }
            i = i + 1;
        }
        self.result = sum;
        return self;
    }
};

int main() {
    SimpleProcessor processor = {0};
    NDArrayProcessor ndProc = processor;
    
    // 2次元配列テスト
    int[2][2] arr2d = [[1, 2], [3, 4]];
    int sum2d = ndProc.process2D(arr2d);
    println(sum2d);  // 10
    
    // 3次元配列テスト
    int[2][2][2] arr3d = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];
    int sum3d = ndProc.process3D(arr3d);
    println(sum3d);  // 36
    
    // 4次元配列テスト
    int[2][2][2][2] arr4d = [
        [[[1, 2], [3, 4]], [[5, 6], [7, 8]]],
        [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]
    ];
    int sum4d = ndProc.process4D(arr4d);
    println(sum4d);  // 1 + 16 = 17
    
    // 5次元配列テスト
    int[2][2][2][2][2] arr5d = [
        [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]],
        [[[[17, 18], [19, 20]], [[21, 22], [23, 24]]], [[[25, 26], [27, 28]], [[29, 30], [31, 32]]]]
    ];
    int sum5d = ndProc.process5D(arr5d);
    println(sum5d);  // 1 + 32 = 33
    
    // 3x3行列の分析
    int[3][3] matrix3x3 = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    ];
    SimpleProcessor result = ndProc.analyze(matrix3x3);
    println(result.result);  // 45
    
    return 0;
}
