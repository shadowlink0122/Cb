// 現在検出できないが将来改善すべきinterfaceエラーケース

interface MathOperator {
    int calculate(int a, int b);
    bool isValid(int input);
};

struct Calculator {
    int mode;
};

// ケース1: 存在しないinterfaceを実装（現在：検出されない、将来：検出すべき）
impl NonExistentInterface for Calculator {
    int process() {
        return 42;
    }
};

// ケース2: 同じinterfaceを重複実装（現在：検出されない、将来：警告またはエラー）
impl MathOperator for Calculator {
    int calculate(int a, int b) {
        return a + b;
    }
    
    bool isValid(int input) {
        return input > 0;
    }
};

impl MathOperator for Calculator {  // 重複 - 現在検出されない
    int calculate(int a, int b) {
        return a * b;  // 異なる実装
    }
    
    bool isValid(int input) {
        return input >= 0;  // 異なる実装
    }
};

// ケース3: メソッド署名の不一致（現在：検出されない、将来：型チェック強化）
impl MathOperator for Calculator {
    string calculate(int a, int b) {  // 戻り値の型が違う: int -> string
        return "result";
    }
    
    bool isValid(string input) {      // 引数の型が違う: int -> string
        return input != "";
    }
};

int main() {
    Calculator calc = {1};
    
    // これらのメソッド呼び出しは現在正常に動作するが、
    // 将来的にはより厳密なエラーチェックが望ましい
    println(calc.calculate(5, 3));
    
    return 0;
}
