// Test: self.member->func() and (*self.member)->func()
// Pattern: Struct member that is a pointer to interface-implementing type

struct Point {
    int x;
    int y;
};

interface IPoint {
    int getX();
    int getY();
    void setX(int newX);
    void setY(int newY);
    int sum();
};

impl IPoint for Point {
    int getX() {
        return self.x;
    }
    
    int getY() {
        return self.y;
    }
    
    void setX(int newX) {
        self.x = newX;
    }
    
    void setY(int newY) {
        self.y = newY;
    }
    
    int sum() {
        return self.x + self.y;
    }
};

struct Container {
    int id;
    Point* data;
};

interface IContainer {
    int getDataX();
    int getDataY();
    void setDataX(int newX);
    void setDataY(int newY);
    int computeDataSum();
    int getIdPlusDataX();
};

impl IContainer for Container {
    // Test 1: self.member->func() pattern
    int getDataX() {
        return self.data->getX();
    }
    
    int getDataY() {
        return self.data->getY();
    }
    
    // Test 2: self.member->func() with modification
    void setDataX(int newX) {
        self.data->setX(newX);
    }
    
    void setDataY(int newY) {
        self.data->setY(newY);
    }
    
    // Test 3: self.member->func() in computation
    int computeDataSum() {
        return self.data->sum();
    }
    
    // Test 4: Mix self.field and self.member->func()
    int getIdPlusDataX() {
        return self.id + self.data->getX();
    }
};

int main() {
    Point p = {x: 10, y: 20};
    Container c = {id: 100, data: &p};
    
    println("=== Self Member Method Call Tests ===");
    
    // Test 1: Read via self.member->method()
    println("\nTest 1: Read via self.data->getX()");
    int x = c.getDataX();
    int y = c.getDataY();
    if (x != 10) {
        println("FAILED: getDataX() expected 10, got", x);
        return 1;
    }
    if (y != 20) {
        println("FAILED: getDataY() expected 20, got", y);
        return 1;
    }
    println("PASSED: x =", x, "y =", y);
    
    // Test 2: Write via self.member->method()
    println("\nTest 2: Write via self.data->setX()");
    c.setDataX(100);
    c.setDataY(200);
    if (p.x != 100) {
        println("FAILED: p.x expected 100, got", p.x);
        return 1;
    }
    if (p.y != 200) {
        println("FAILED: p.y expected 200, got", p.y);
        return 1;
    }
    println("PASSED: p.x =", p.x, "p.y =", p.y);
    
    // Test 3: Compute via self.member->method()
    println("\nTest 3: Compute via self.data->sum()");
    int total = c.computeDataSum();
    if (total != 300) {
        println("FAILED: computeDataSum() expected 300, got", total);
        return 1;
    }
    println("PASSED: sum =", total);
    
    // Test 4: Mix self.field and self.member->method()
    println("\nTest 4: Mix self.id and self.data->getX()");
    int combined = c.getIdPlusDataX();
    if (combined != 200) {
        println("FAILED: getIdPlusDataX() expected 200, got", combined);
        return 1;
    }
    println("PASSED: combined =", combined);
    
    // Test 5: Verify original point was modified
    println("\nTest 5: Verify original point");
    if (p.x != 100 || p.y != 200) {
        println("FAILED: expected p(100, 200), got p(", p.x, ",", p.y, ")");
        return 1;
    }
    println("PASSED: p.x =", p.x, "p.y =", p.y);
    
    // Test 6: Call method on pointer member directly
    println("\nTest 6: Direct pointer member method call");
    p.setX(500);
    p.setY(600);
    if (p.x != 500 || p.y != 600) {
        println("FAILED: direct call failed");
        return 1;
    }
    
    // Verify through container
    int newX = c.getDataX();
    int newY = c.getDataY();
    if (newX != 500 || newY != 600) {
        println("FAILED: container read after direct call failed");
        return 1;
    }
    println("PASSED: after direct call, container sees x =", newX, "y =", newY);
    
    println("\n=== All Self Member Method Call Tests Passed ===");
    return 0;
}
