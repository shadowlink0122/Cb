// 包括的なselfアクセステスト

struct Point {
    int x;
    int y;
};

struct Rectangle {
    Point topLeft;
    Point bottomRight;
    int width;
    int height;
};

interface Shape {
    int area();
    void move(int dx, int dy);
    void scale(int factor);
    void reset();
    int getWidth();
};

impl Shape for Rectangle {
    int area() {
        println("=== Test 1: Basic self member access ===");
        println("self.width:");
        println(self.width);
        println("self.height:");
        println(self.height);
        
        return self.width * self.height;
    }
    
    void move(int dx, int dy) {
        println("=== Test 2: Nested member access via self ===");
        println("Before move:");
        println("self.topLeft.x:");
        println(self.topLeft.x);
        println("self.topLeft.y:");
        println(self.topLeft.y);
        
        self.topLeft.x = self.topLeft.x + dx;
        self.topLeft.y = self.topLeft.y + dy;
        self.bottomRight.x = self.bottomRight.x + dx;
        self.bottomRight.y = self.bottomRight.y + dy;
        
        println("After move:");
        println("self.topLeft.x:");
        println(self.topLeft.x);
        println("self.topLeft.y:");
        println(self.topLeft.y);
    }
    
    void scale(int factor) {
        println("=== Test 3: Computation with nested members ===");
        int oldWidth;
        oldWidth = self.bottomRight.x - self.topLeft.x;
        println("Old width:");
        println(oldWidth);
        
        // スケーリング
        self.width = self.width * factor;
        self.height = self.height * factor;
        self.bottomRight.x = self.topLeft.x + self.width;
        self.bottomRight.y = self.topLeft.y + self.height;
        
        println("New width:");
        println(self.width);
    }
    
    void reset() {
        println("=== Test 4: Multiple self assignments ===");
        self.topLeft.x = 0;
        self.topLeft.y = 0;
        self.bottomRight.x = 10;
        self.bottomRight.y = 10;
        self.width = 10;
        self.height = 10;
        
        println("Reset complete:");
        println("self.topLeft.x:");
        println(self.topLeft.x);
        println("self.width:");
        println(self.width);
    }
    
    int getWidth() {
        println("=== Test 5: Return nested member value ===");
        // ネストメンバーを使った計算
        int calculatedWidth;
        calculatedWidth = self.bottomRight.x - self.topLeft.x;
        println("Calculated width:");
        println(calculatedWidth);
        println("Stored width:");
        println(self.width);
        return calculatedWidth;
    }
};

int main() {
    Rectangle rect;
    rect.topLeft.x = 10;
    rect.topLeft.y = 20;
    rect.bottomRight.x = 50;
    rect.bottomRight.y = 60;
    rect.width = 40;
    rect.height = 40;
    
    println("Initial rectangle:");
    println("topLeft: (10, 20)");
    println("bottomRight: (50, 60)");
    println("width: 40, height: 40");
    println("");
    
    // Test 1: Basic member access
    int a;
    a = rect.area();
    println("Area result:");
    println(a);
    println("");
    
    // Test 2: Nested member modification
    rect.move(5, 10);
    println("");
    
    // Test 3: Computation with nested members
    rect.scale(2);
    println("");
    
    // Test 4: Multiple assignments
    rect.reset();
    println("");
    
    // Test 5: Return value
    int w;
    w = rect.getWidth();
    println("Returned width:");
    println(w);
    
    return 0;
}
