// デフォルトメンバーの包括的テスト（期待値付き）

struct IntBox {
    default int value;
};

struct StringBox {
    default string value;
};

struct BoolBox {
    default bool value;
};

struct DoubleBox {
    default double value;
};

struct Person {
    string name;
    default int age;
    string city;
};

// アサーション関数
void assert_int(int expected, int actual, string message) {
    if (expected == actual) {
        print("  ✓ ");
        println(message);
    } else {
        print("  ✗ ");
        print(message);
        print(" - Expected: ");
        print(expected);
        print(", Got: ");
        println(actual);
    }
}

void assert_string(string expected, string actual, string message) {
    if (expected == actual) {
        print("  ✓ ");
        println(message);
    } else {
        print("  ✗ ");
        print(message);
        print(" - Expected: '");
        print(expected);
        print("', Got: '");
        print(actual);
        println("'");
    }
}

void assert_bool(bool expected, bool actual, string message) {
    int exp_int = 0;
    int act_int = 0;
    if (expected) { exp_int = 1; }
    if (actual) { act_int = 1; }
    
    if (exp_int == act_int) {
        print("  ✓ ");
        println(message);
    } else {
        print("  ✗ ");
        println(message);
    }
}

void test_section(string name) {
    println("");
    print("=== ");
    print(name);
    println(" ===");
}

void main() {
    println("Default Member Comprehensive Test Suite");
    println("========================================");
    
    // Test 1: 整数型のデフォルトメンバー
    test_section("Test 1: Integer Default Member");
    IntBox ib = {42};
    assert_int(42, ib.value, "Initial value via explicit access");
    
    ib = 100;
    assert_int(100, ib.value, "After implicit assignment (ib = 100)");
    
    ib.value = 200;
    assert_int(200, ib.value, "After explicit assignment (ib.value = 200)");
    
    // Test 2: 文字列型のデフォルトメンバー
    test_section("Test 2: String Default Member");
    StringBox sb;
    sb.value = "Hello";
    assert_string("Hello", sb.value, "Initial value via explicit access");
    
    sb.value = "World";
    assert_string("World", sb.value, "After explicit assignment");
    
    sb = "Test";
    assert_string("Test", sb.value, "After implicit assignment");
    
    // Test 3: bool型のデフォルトメンバー
    test_section("Test 3: Boolean Default Member");
    BoolBox bb = {true};
    assert_bool(true, bb.value, "Initial value true");
    
    bb = false;
    assert_bool(false, bb.value, "After implicit assignment (bb = false)");
    
    bb = true;
    assert_bool(true, bb.value, "After implicit assignment (bb = true)");
    
    // Test 4: double型のデフォルトメンバー
    test_section("Test 4: Double Default Member");
    DoubleBox db = {3.14};
    // doubleの比較は難しいので、値が設定されたことだけ確認
    print("  Initial value: ");
    println(db.value);
    
    db = 2.718;
    print("  After implicit assignment: ");
    println(db.value);
    
    // Test 5: 複数メンバーを持つ構造体
    test_section("Test 5: Multi-member Struct");
    Person p = {"Alice", 30, "Tokyo"};
    assert_string("Alice", p.name, "Name field");
    assert_int(30, p.age, "Age field (default member)");
    assert_string("Tokyo", p.city, "City field");
    
    p = 35;  // 暗黙的にageに代入
    assert_int(35, p.age, "After implicit assignment (p = 35)");
    assert_string("Alice", p.name, "Name unchanged after implicit assignment");
    assert_string("Tokyo", p.city, "City unchanged after implicit assignment");
    
    // Test 6: 配列内の構造体
    test_section("Test 6: Struct Array");
    IntBox[3] arr;
    arr[0] = 10;
    arr[1] = 20;
    arr[2] = 30;
    
    assert_int(10, arr[0].value, "Array[0] implicit assignment");
    assert_int(20, arr[1].value, "Array[1] implicit assignment");
    assert_int(30, arr[2].value, "Array[2] implicit assignment");
    
    // Test 7: ポインタとデフォルトメンバー
    test_section("Test 7: Pointer Access");
    IntBox ib2 = {99};
    IntBox* ptr = &ib2;
    
    assert_int(99, ptr->value, "Pointer dereference access");
    
    ptr->value = 88;
    assert_int(88, ib2.value, "After pointer assignment");
    
    ib2 = 77;
    assert_int(77, ptr->value, "Pointer sees implicit assignment");
    
    // Test 8: 文字列ポインタアクセス
    test_section("Test 8: String Pointer Access");
    StringBox sb2 = {"Original"};
    StringBox* sptr = &sb2;
    
    assert_string("Original", sptr->value, "String pointer dereference");
    
    sptr->value = "Modified";
    assert_string("Modified", sb2.value, "After string pointer assignment");
    
    sb2 = "Final";
    assert_string("Final", sptr->value, "String pointer sees implicit assignment");
    
    println("");
    println("========================================");
    println("Test Suite Completed");
    println("========================================");
}
