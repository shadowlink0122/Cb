// Cb言語用のテストヘルパー関数
// 期待値を簡単にアサートできるようにする

// アサーション関数（Cb言語で使用可能）
void assert_int(int expected, int actual, string message) {
    if (expected == actual) {
        print("✓ ");
        println(message);
    } else {
        print("✗ ");
        print(message);
        print(" - Expected: ");
        print(expected);
        print(", Actual: ");
        println(actual);
    }
}

void assert_string(string expected, string actual, string message) {
    if (expected == actual) {
        print("✓ ");
        println(message);
    } else {
        print("✗ ");
        print(message);
        print(" - Expected: '");
        print(expected);
        print("', Actual: '");
        print(actual);
        println("'");
    }
}

void assert_bool(bool expected, bool actual, string message) {
    if (expected == actual) {
        print("✓ ");
        println(message);
    } else {
        print("✗ ");
        print(message);
        print(" - Expected: ");
        if (expected) {
            print("true");
        } else {
            print("false");
        }
        print(", Actual: ");
        if (actual) {
            println("true");
        } else {
            println("false");
        }
    }
}

void assert_double(double expected, double actual, string message) {
    // 浮動小数点数の比較は近似値で行う
    double diff = expected - actual;
    if (diff < 0.0) {
        diff = -diff;
    }
    
    if (diff < 0.001) {
        print("✓ ");
        println(message);
    } else {
        print("✗ ");
        print(message);
        print(" - Expected: ");
        print(expected);
        print(", Actual: ");
        println(actual);
    }
}

void test_section(string section_name) {
    println("");
    print("=== ");
    print(section_name);
    println(" ===");
}

void test_pass(string message) {
    print("✓ ");
    println(message);
}

void test_fail(string message) {
    print("✗ ");
    println(message);
}
