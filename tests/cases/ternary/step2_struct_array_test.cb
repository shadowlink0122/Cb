// 実用的なアプローチ: 構造体配列変数を使用

typedef struct {
    string name;
    int age;
} Person;

// 構造体配列を初期化する関数
void init_people_array(Person[2] arr) {
    arr[0].name = "Alice";
    arr[0].age = 25;
    arr[1].name = "Bob";
    arr[1].age = 30;
}

int[3] get_numbers() {
    int[3] arr = [10, 20, 30];
    return arr;
}

int main() {
    // 既存機能: 数値配列戻り値
    println("Numbers test:");
    println(get_numbers()[0]);  // 10
    println(get_numbers()[1]);  // 20
    println(get_numbers()[2]);  // 30
    
    // 構造体配列アクセス（変数を使用）
    println("Struct array test:");
    Person[2] people;
    init_people_array(people);
    
    println(people[0].name);  // Alice
    println(people[0].age);   // 25
    println(people[1].name);  // Bob
    println(people[1].age);   // 30
    
    // 三項演算子でのテスト
    println("Ternary test:");
    bool flag = true;
    println(flag ? people[0].name : people[1].name);  // Alice
    println(flag ? people[0].age : people[1].age);    // 25
    
    return 0;
}
