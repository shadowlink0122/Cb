// 高度なチェーン処理テスト - メソッドチェーンとInterface/Implシステムの組み合わせ

struct Calculator {
    int value;
    string name;
};

interface Chainable {
    Calculator add(int n);
    Calculator multiply(int n);
    Calculator setName(string name);
    int getValue();
    string getName();
    bool isEven();
    bool isPositive();
};

impl Chainable for Calculator {
    Calculator add(int n) {
        self.value = self.value + n;
        return self;
    }
    
    Calculator multiply(int n) {
        self.value = self.value * n;
        return self;
    }
    
    Calculator setName(string name) {
        self.name = name;
        return self;
    }
    
    int getValue() {
        return self.value;
    }
    
    string getName() {
        return self.name;
    }
    
    bool isEven() {
        return (self.value % 2) == 0;
    }
    
    bool isPositive() {
        return self.value > 0;
    }
};

struct NumberProcessor {
    int current;
    bool debug_mode;
};

interface Processor {
    NumberProcessor increment();
    NumberProcessor decrement();
    NumberProcessor reset();
    NumberProcessor setDebug(bool enabled);
    int process(int input);
};

impl Processor for NumberProcessor {
    NumberProcessor increment() {
        self.current = self.current + 1;
        return self;
    }
    
    NumberProcessor decrement() {
        self.current = self.current - 1;
        return self;
    }
    
    NumberProcessor reset() {
        self.current = 0;
        return self;
    }
    
    NumberProcessor setDebug(bool enabled) {
        self.debug_mode = enabled;
        return self;
    }
    
    int process(int input) {
        return self.current + input;
    }
};

int main() {
    println("=== Advanced Chain Processing Test ===");
    
    // 1. 基本的なメソッドチェーンテスト
    Calculator calc;
    calc.value = 5;
    calc.name = "BasicCalc";
    
    // チェーン処理: add -> multiply -> getValue
    Calculator result1 = calc.add(10);  // 5 + 10 = 15
    Calculator result2 = result1.multiply(2);  // 15 * 2 = 30
    int final_value = result2.getValue();
    println("Basic chain result: %d", final_value);  // 30
    
    // 2. 三項演算子とメソッドチェーンの組み合わせ
    Calculator calc2;
    calc2.value = -8;
    calc2.name = "ConditionalCalc";
    
    // 条件に基づくメソッド選択
    bool should_add = true;
    Calculator conditional_result = should_add ? calc2.add(15) : calc2.multiply(2);
    int conditional_value = conditional_result.getValue();
    println("Conditional chain result: %d", conditional_value);  // -8 + 15 = 7
    
    // 3. ネストした三項演算子とメソッドチェーン
    Calculator calc3;
    calc3.value = 12;
    calc3.name = "NestedCalc";
    
    // 複雑な条件分岐によるチェーン選択
    bool is_positive = calc3.isPositive();
    bool is_even = calc3.isEven();
    
    Calculator nested_result = is_positive ? 
        (is_even ? calc3.multiply(3) : calc3.add(5)) :
        (is_even ? calc3.add(-2) : calc3.multiply(-1));
    
    int nested_value = nested_result.getValue();
    println("Nested chain result: %d", nested_value);  // positive & even -> 12 * 3 = 36
    
    // 4. 複数のオブジェクトでのチェーン処理
    NumberProcessor proc1;
    proc1.current = 0;
    proc1.debug_mode = false;
    
    NumberProcessor proc2;
    proc2.current = 10;
    proc2.debug_mode = true;
    
    // 条件に基づくプロセッサー選択とチェーン処理
    bool use_first_processor = false;
    NumberProcessor selected_proc = use_first_processor ? proc1 : proc2;
    NumberProcessor chained_proc = selected_proc.increment().increment().setDebug(true);
    
    int processed_value = chained_proc.process(5);
    println("Multi-object chain result: %d", processed_value);  // (10 + 1 + 1) + 5 = 17
    
    // 5. 文字列チェーンと三項演算子
    Calculator calc4;
    calc4.value = 100;
    calc4.name = "StringTest";
    
    string result_name = calc4.getName();
    Calculator name_result = calc4.setName(calc4.isEven() ? "EvenCalculator" : "OddCalculator");
    string final_name = name_result.getName();
    
    println("String chain result: %s", final_name);  // "EvenCalculator"
    
    // 6. 深いネストチェーン処理
    Calculator calc5;
    calc5.value = 2;
    calc5.name = "DeepNested";
    
    // 4レベルの三項演算子ネスト
    int depth_condition = calc5.getValue();
    Calculator deep_result = (depth_condition > 0) ?
        ((depth_condition > 5) ?
            ((depth_condition > 10) ? calc5.multiply(4) : calc5.multiply(3)) :
            ((depth_condition > 1) ? calc5.add(8) : calc5.add(4))) :
        calc5.multiply(-1);
    
    int deep_value = deep_result.getValue();
    println("Deep nested result: %d", deep_value);  // 2 > 0, 2 <= 5, 2 > 1 -> 2 + 8 = 10
    
    // 7. 型推論チェーン処理
    Calculator calc6;
    calc6.value = 42;
    calc6.name = "TypeInference";
    
    // メソッドの戻り値型を利用した連続処理
    bool final_even_check = calc6.add(8).multiply(2).isEven();  // (42+8)*2=100 -> even
    println("Type inference chain result: %d", final_even_check ? 1 : 0);  // 1 (true)
    
    println("=== Advanced Chain Processing Complete ===");
    return 0;
}
