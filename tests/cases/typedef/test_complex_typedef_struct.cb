// 複雑な構造体リテラルとtypedefメンバーの包括的テスト

// 基本的なtypedef構造体
typedef struct {
    int x;
    int y;
} Point;

typedef struct {
    int r;
    int g;
    int b;
} Color;

// typedef構造体をメンバーに持つ構造体
typedef struct {
    Point position;
    Color color;
    int radius;
} Circle;

// typedef構造体配列をメンバーに持つ構造体
typedef struct {
    Point[3] vertices;
    Color fill;
    string name;
} Triangle;

// 多レベルのネスト
typedef struct {
    Circle[2] circles;
    Triangle triangle;
    string scene_name;
} Scene;

int main() {
    println("=== Test 1: Simple typedef struct literal ===");
    Point p1 = {10, 20};
    Color c1 = {255, 128, 64};
    
    if (p1.x != 10 || p1.y != 20) {
        println("ERROR: Point initialization failed");
        return 1;
    }
    if (c1.r != 255 || c1.g != 128 || c1.b != 64) {
        println("ERROR: Color initialization failed");
        return 1;
    }
    println("Point: (%d, %d)", p1.x, p1.y);
    println("Color: RGB(%d, %d, %d)", c1.r, c1.g, c1.b);
    
    println("\n=== Test 2: Nested typedef struct literal ===");
    Circle circle1 = {{100, 150}, {255, 0, 0}, 50};
    
    if (circle1.position.x != 100 || circle1.position.y != 150) {
        println("ERROR: Circle position initialization failed");
        return 1;
    }
    if (circle1.color.r != 255 || circle1.color.g != 0 || circle1.color.b != 0) {
        println("ERROR: Circle color initialization failed");
        return 1;
    }
    if (circle1.radius != 50) {
        println("ERROR: Circle radius initialization failed");
        return 1;
    }
    println("Circle at (%d, %d), color RGB(%d, %d, %d), radius %d",
            circle1.position.x, circle1.position.y,
            circle1.color.r, circle1.color.g, circle1.color.b,
            circle1.radius);
    
    println("\n=== Test 3: Struct with typedef array member ===");
    Triangle tri = {[{0, 0}, {100, 0}, {50, 86}], {0, 255, 0}, "GreenTriangle"};
    
    if (tri.vertices[0].x != 0 || tri.vertices[0].y != 0) {
        println("ERROR: Triangle vertex 0 initialization failed");
        return 1;
    }
    if (tri.vertices[1].x != 100 || tri.vertices[1].y != 0) {
        println("ERROR: Triangle vertex 1 initialization failed");
        return 1;
    }
    if (tri.vertices[2].x != 50 || tri.vertices[2].y != 86) {
        println("ERROR: Triangle vertex 2 initialization failed");
        return 1;
    }
    if (tri.fill.r != 0 || tri.fill.g != 255 || tri.fill.b != 0) {
        println("ERROR: Triangle fill color initialization failed");
        return 1;
    }
    println("Triangle '%s' vertices: (%d,%d), (%d,%d), (%d,%d)",
            tri.name,
            tri.vertices[0].x, tri.vertices[0].y,
            tri.vertices[1].x, tri.vertices[1].y,
            tri.vertices[2].x, tri.vertices[2].y);
    println("Fill color: RGB(%d, %d, %d)", tri.fill.r, tri.fill.g, tri.fill.b);
    
    println("\n=== Test 4: Multi-level nested typedef struct ===");
    Scene scene = {
        [
            {{10, 10}, {255, 0, 0}, 20},
            {{50, 50}, {0, 0, 255}, 30}
        ],
        {[{0, 100}, {100, 100}, {50, 0}], {255, 255, 0}, "YellowTri"},
        "TestScene"
    };
    
    if (scene.circles[0].position.x != 10 || scene.circles[0].position.y != 10) {
        println("ERROR: Scene circle 0 position initialization failed");
        return 1;
    }
    if (scene.circles[0].radius != 20) {
        println("ERROR: Scene circle 0 radius initialization failed");
        return 1;
    }
    if (scene.circles[1].position.x != 50 || scene.circles[1].position.y != 50) {
        println("ERROR: Scene circle 1 position initialization failed");
        return 1;
    }
    if (scene.circles[1].radius != 30) {
        println("ERROR: Scene circle 1 radius initialization failed");
        return 1;
    }
    if (scene.triangle.vertices[0].x != 0 || scene.triangle.vertices[0].y != 100) {
        println("ERROR: Scene triangle vertex 0 initialization failed");
        return 1;
    }
    
    println("Scene '%s':", scene.scene_name);
    println("  Circle 0: pos(%d,%d), radius=%d",
            scene.circles[0].position.x, scene.circles[0].position.y,
            scene.circles[0].radius);
    println("  Circle 1: pos(%d,%d), radius=%d",
            scene.circles[1].position.x, scene.circles[1].position.y,
            scene.circles[1].radius);
    println("  Triangle '%s': vertex 0(%d,%d)",
            scene.triangle.name,
            scene.triangle.vertices[0].x, scene.triangle.vertices[0].y);
    
    println("\n=== Test 5: Individual member assignment ===");
    Circle circle2;
    circle2.position.x = 200;
    circle2.position.y = 250;
    circle2.color.r = 128;
    circle2.color.g = 128;
    circle2.color.b = 128;
    circle2.radius = 75;
    
    if (circle2.position.x != 200 || circle2.position.y != 250) {
        println("ERROR: Individual assignment to nested position failed");
        return 1;
    }
    if (circle2.color.r != 128 || circle2.color.g != 128 || circle2.color.b != 128) {
        println("ERROR: Individual assignment to nested color failed");
        return 1;
    }
    if (circle2.radius != 75) {
        println("ERROR: Individual assignment to radius failed");
        return 1;
    }
    println("Circle2: pos(%d,%d), color RGB(%d,%d,%d), radius=%d",
            circle2.position.x, circle2.position.y,
            circle2.color.r, circle2.color.g, circle2.color.b,
            circle2.radius);
    
    println("\n=== Test 6: Array element assignment with typedef struct ===");
    Triangle tri2;
    tri2.name = "BlueTri";
    tri2.vertices[0].x = 5;
    tri2.vertices[0].y = 10;
    tri2.vertices[1].x = 15;
    tri2.vertices[1].y = 10;
    tri2.vertices[2].x = 10;
    tri2.vertices[2].y = 20;
    tri2.fill.r = 0;
    tri2.fill.g = 0;
    tri2.fill.b = 255;
    
    if (tri2.vertices[0].x != 5 || tri2.vertices[0].y != 10) {
        println("ERROR: Array element assignment failed for vertex 0");
        return 1;
    }
    if (tri2.vertices[1].x != 15 || tri2.vertices[1].y != 10) {
        println("ERROR: Array element assignment failed for vertex 1");
        return 1;
    }
    if (tri2.vertices[2].x != 10 || tri2.vertices[2].y != 20) {
        println("ERROR: Array element assignment failed for vertex 2");
        return 1;
    }
    if (tri2.fill.r != 0 || tri2.fill.g != 0 || tri2.fill.b != 255) {
        println("ERROR: Array element color assignment failed");
        return 1;
    }
    println("Triangle2 '%s': vertices (%d,%d), (%d,%d), (%d,%d)",
            tri2.name,
            tri2.vertices[0].x, tri2.vertices[0].y,
            tri2.vertices[1].x, tri2.vertices[1].y,
            tri2.vertices[2].x, tri2.vertices[2].y);
    println("Fill: RGB(%d,%d,%d)", tri2.fill.r, tri2.fill.g, tri2.fill.b);
    
    println("\n=== Test 7: Multi-level array access ===");
    Scene scene2;
    scene2.scene_name = "DynamicScene";
    scene2.circles[0].position.x = 111;
    scene2.circles[0].position.y = 222;
    scene2.circles[0].color.r = 10;
    scene2.circles[0].color.g = 20;
    scene2.circles[0].color.b = 30;
    scene2.circles[0].radius = 40;
    
    scene2.triangle.vertices[0].x = 1;
    scene2.triangle.vertices[0].y = 2;
    scene2.triangle.vertices[1].x = 3;
    scene2.triangle.vertices[1].y = 4;
    scene2.triangle.vertices[2].x = 5;
    scene2.triangle.vertices[2].y = 6;
    scene2.triangle.fill.r = 100;
    scene2.triangle.fill.g = 150;
    scene2.triangle.fill.b = 200;
    scene2.triangle.name = "NestedTri";
    
    if (scene2.circles[0].position.x != 111 || scene2.circles[0].position.y != 222) {
        println("ERROR: Multi-level array access failed for circle position");
        return 1;
    }
    if (scene2.circles[0].color.r != 10) {
        println("ERROR: Multi-level array access failed for circle color.r");
        return 1;
    }
    if (scene2.triangle.vertices[1].x != 3 || scene2.triangle.vertices[1].y != 4) {
        println("ERROR: Multi-level array access failed for triangle vertex");
        return 1;
    }
    if (scene2.triangle.fill.g != 150) {
        println("ERROR: Multi-level array access failed for triangle fill.g");
        return 1;
    }
    
    println("Scene2 '%s': circle[0] at (%d,%d), radius=%d",
            scene2.scene_name,
            scene2.circles[0].position.x,
            scene2.circles[0].position.y,
            scene2.circles[0].radius);
    println("  Triangle '%s': vertex[1] at (%d,%d), fill RGB(%d,%d,%d)",
            scene2.triangle.name,
            scene2.triangle.vertices[1].x,
            scene2.triangle.vertices[1].y,
            scene2.triangle.fill.r,
            scene2.triangle.fill.g,
            scene2.triangle.fill.b);
    
    println("\n=== All complex typedef struct tests passed! ===");
    return 0;
}
