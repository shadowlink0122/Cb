// 現在サポートされているtypedef構造体の機能テスト

typedef struct {
    int id;
    string name;
} Person;

typedef struct {
    int width;
    int height;
} Size;

typedef struct {
    Person[3] members;
    Size dimensions;
    string team_name;
} Team;

int main() {
    println("=== Test 1: Basic typedef struct ===");
    Person p1 = {1, "Alice"};
    println("Person: id=%d, name=%s", p1.id, p1.name);
    
    println("\n=== Test 2: Typedef struct array ===");
    Person[2] people;
    people[0].id = 10;
    people[0].name = "Bob";
    people[1].id = 20;
    people[1].name = "Charlie";
    println("people[0]: id=%d, name=%s", people[0].id, people[0].name);
    println("people[1]: id=%d, name=%s", people[1].id, people[1].name);
    
    println("\n=== Test 3: Typedef struct with array member - literal ===");
    Team t1 = {[{1, "Alice"}, {2, "Bob"}, {3, "Charlie"}], {100, 200}, "TeamA"};
    println("Team: %s", t1.team_name);
    println("  Member 0: id=%d, name=%s", t1.members[0].id, t1.members[0].name);
    println("  Member 1: id=%d, name=%s", t1.members[1].id, t1.members[1].name);
    println("  Member 2: id=%d, name=%s", t1.members[2].id, t1.members[2].name);
    
    // dimensionsはネストアクセスではなく、一時変数経由でアクセス
    Size team_size = t1.dimensions;
    println("  Dimensions: %dx%d", team_size.width, team_size.height);
    
    println("\n=== Test 4: Individual array element assignment ===");
    Team t2;
    t2.team_name = "TeamB";
    t2.members[0].id = 100;
    t2.members[0].name = "Dave";
    t2.members[1].id = 101;
    t2.members[1].name = "Eve";
    t2.members[2].id = 102;
    t2.members[2].name = "Frank";
    
    println("Team: %s", t2.team_name);
    println("  Member 0: id=%d, name=%s", t2.members[0].id, t2.members[0].name);
    println("  Member 1: id=%d, name=%s", t2.members[1].id, t2.members[1].name);
    println("  Member 2: id=%d, name=%s", t2.members[2].id, t2.members[2].name);
    
    println("\n=== Test 5: Typedef struct as function parameter ===");
    // Note: 関数テストは別ファイルで実施
    
    println("\n=== All supported typedef tests passed! ===");
    return 0;
}
