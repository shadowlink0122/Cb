enum Priority {
    low = 1,
    medium = 5,
    high = 10,
    critical = 20
};

int main() {
    int task_priority = Priority::high;
    int classification = 0;
    
    // Verify initial enum value
    if (task_priority != 10) {
        println("ERROR: Priority::high should be 10, got %d", task_priority);
        return 1;
    }
    
    if (task_priority == Priority::critical) {
        classification = 4; // urgent
    } else if (task_priority >= Priority::high) {
        classification = 3; // important
    } else if (task_priority >= Priority::medium) {
        classification = 2; // normal
    } else {
        classification = 1; // later
    }
    
    // Verify conditional logic based on enum values
    if (classification != 3) {
        println("ERROR: With Priority::high, classification should be 3, got %d", classification);
        return 1;
    }
    
    // Test different priority values
    int low_priority = Priority::low;
    int result_for_low = 0;
    
    if (low_priority == Priority::critical) {
        result_for_low = 4;
    } else if (low_priority >= Priority::high) {
        result_for_low = 3;
    } else if (low_priority >= Priority::medium) {
        result_for_low = 2;
    } else {
        result_for_low = 1;
    }
    
    if (result_for_low != 1) {
        println("ERROR: With Priority::low, result should be 1, got %d", result_for_low);
        return 1;
    }
    
    println("Priority values tested:");
    println("  Priority::high = %d, classification = %d", task_priority, classification);
    println("  Priority::low = %d, classification = %d", low_priority, result_for_low);
    println("Enum conditional test passed");
    return 0;
}
