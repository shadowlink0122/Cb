// Union型関数戻り値テスト

typedef Result = int | string;
typedef Status = 200 | 404 | 500;

struct ApiResponse {
    Status status;
    Result data;
    string message;
};

Result process_number(int num) {
    if (num > 0) {
        return num * 2;
    } else {
        return "Invalid number";
    }
}

ApiResponse create_response(Status status, Result data) {
    ApiResponse response = {
        status: status,
        data: data,
        message: "Processed"
    };
    return response;
}

int main() {
    println("=== Union型関数戻り値テスト ===");
    
    // Union型を返す関数のテスト
    Result result1 = process_number(5);
    Result result2 = process_number(-1);
    
    println("Function return values:");
    println("  process_number(5): %d", result1);
    println("  process_number(-1): %s", result2);
    
    // 構造体でUnion型を使用
    ApiResponse response1 = create_response(200, result1);
    ApiResponse response2 = create_response(404, result2);
    
    println("API Response 1:");
    println("  status: %d", response1.status);
    println("  data: %d", response1.data);
    println("  message: %s", response1.message);
    
    println("API Response 2:");
    println("  status: %d", response2.status);
    println("  data: %s", response2.data);
    println("  message: %s", response2.message);
    
    // Union型パラメータのテスト
    Result mixed_result = "Direct string";
    ApiResponse response3 = create_response(500, mixed_result);
    
    println("API Response 3:");
    println("  status: %d", response3.status);
    println("  data: %s", response3.data);
    println("  message: %s", response3.message);
    
    return 0;
}
