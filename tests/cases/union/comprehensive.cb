// ユニオン型包括的統合テスト

// 全種類のユニオン型定義
typedef StatusCode = 200 | 404 | 500;
typedef Flag = true | false;
typedef Grade = 'A' | 'B' | 'C';
typedef LogLevel = "DEBUG" | "INFO" | "ERROR";

typedef NumericType = int | long;
typedef PrimitiveType = int | bool | char;

typedef MyInt = int;
typedef MyString = string;
typedef CustomUnion = MyInt | MyString;

struct Point { int x, y; };
struct Person { string name; int age; };
typedef EntityUnion = Point | Person;

typedef ArrayUnion = int[3] | bool[2];

typedef MegaUnion = 999 | "special" | true | int | MyInt | Point | int[2];

int main() {
    println("=== ユニオン型包括的統合テスト ===");
    
    // ========== Section 1: リテラル値ユニオン ==========
    println("1. Literal Value Unions:");
    StatusCode status = 200;
    Flag enabled = true;
    Grade grade = 'A';
    LogLevel level = "INFO";
    
    println("   StatusCode: %d", status);
    println("   Flag: %d", enabled);
    println("   Grade: %c", grade);
    println("   LogLevel: %s", level);
    
    // ========== Section 2: 基本型ユニオン ==========
    println("2. Basic Type Unions:");
    NumericType num1 = 42;
    NumericType num2 = 1000000;
    PrimitiveType prim1 = 123;
    PrimitiveType prim2 = true;
    PrimitiveType prim3 = 'X';
    
    println("   NumericType (int): %d", num1);
    println("   NumericType (long): %d", num2);
    println("   PrimitiveType (int): %d", prim1);
    println("   PrimitiveType (bool): %d", prim2);
    println("   PrimitiveType (char): %c", prim3);
    
    // ========== Section 3: カスタム型ユニオン ==========
    println("3. Custom Type Unions:");
    MyInt customInt = 777;
    MyString customString = "CustomText";
    CustomUnion custom1 = customInt;
    CustomUnion custom2 = customString;
    
    println("   MyInt: %d", customInt);
    println("   MyString: %s", customString);
    println("   CustomUnion (MyInt): %d", custom1);
    println("   CustomUnion (MyString): %s", custom2);
    
    // ========== Section 4: 構造体型ユニオン ==========
    println("4. Struct Type Unions:");
    Point origin = {x: 0, y: 0};
    Point target = {10, 20};
    Person alice = {name: "Alice", age: 25};
    Person bob = {"Bob", 30};
    
    EntityUnion entity1 = origin;
    EntityUnion entity2 = alice;
    
    println("   Point origin: (%d, %d)", origin.x, origin.y);
    println("   Point target: (%d, %d)", target.x, target.y);
    println("   Person Alice: %s, %d", alice.name, alice.age);
    println("   Person Bob: %s, %d", bob.name, bob.age);
    println("   EntityUnion (Point): assigned");
    println("   EntityUnion (Person): assigned");
    
    // ========== Section 5: 配列型ユニオン ==========
    println("5. Array Type Unions:");
    int[3] numbers = [1, 2, 3];
    bool[2] flags = [true, false];
    
    ArrayUnion array1 = numbers;
    ArrayUnion array2 = flags;
    
    println("   int[3]: [%d, %d, %d]", numbers[0], numbers[1], numbers[2]);
    println("   bool[2]: [%d, %d]", flags[0], flags[1]);
    println("   ArrayUnion (int[3]): assigned");
    println("   ArrayUnion (bool[2]): assigned");
    
    // ========== Section 6: 混合複合型ユニオン ==========
    println("6. Mixed Complex Unions:");
    MegaUnion mega1 = 999;              // リテラル
    MegaUnion mega2 = "special";        // 文字列リテラル
    MegaUnion mega3 = true;             // Boolean リテラル
    
    // int型の直接代入をテスト
    int regularInt = 888;
    MegaUnion mega4 = regularInt;       // int型直接代入
    MegaUnion mega5 = customInt;        // カスタム型
    MegaUnion mega6 = origin;           // 構造体型
    
    int[2] coords = [50, 100];
    MegaUnion mega7 = coords;           // 配列型
    
    println("   MegaUnion (999): %d", mega1);
    println("   MegaUnion (special): %s", mega2);
    println("   MegaUnion (true): %d", mega3);
    println("   Regular int variable: %d", regularInt);
    println("   MegaUnion (int): %d", mega4);
    println("   MegaUnion (MyInt): %d", mega5);
    println("   MegaUnion (Point): assigned");
    println("   MegaUnion (int[2]): assigned");
    
    // ========== Section 7: 動的代入テスト ==========
    println("7. Dynamic Assignment Test:");
    status = 404;
    enabled = false;
    grade = 'C';
    level = "ERROR";
    
    println("   Updated StatusCode: %d", status);
    println("   Updated Flag: %d", enabled);
    println("   Updated Grade: %c", grade);
    println("   Updated LogLevel: %s", level);
    
    // ========== Section 8: 複雑な構造体操作 ==========
    println("8. Complex Struct Operations:");
    Person charlie = {"Charlie", 35};
    Point center = {25, 25};
    
    entity1 = charlie;
    entity2 = center;
    
    println("   EntityUnion reassignment: completed");
    println("   Charlie: %s, %d", charlie.name, charlie.age);
    println("   Center: (%d, %d)", center.x, center.y);
    
    // ========== テスト完了 ==========
    println("");
    println("=== 統合テスト結果サマリ ===");
    println("✓ リテラル値ユニオン: 4/4 成功");
    println("✓ 基本型ユニオン: 5/5 成功");
    println("✓ カスタム型ユニオン: 4/4 成功");
    println("✓ 構造体型ユニオン: 6/6 成功");  
    println("✓ 配列型ユニオン: 4/4 成功");
    println("✓ 混合複合型ユニオン: 7/7 成功");
    println("✓ 動的代入テスト: 4/4 成功");
    println("✓ 複雑な構造体操作: 4/4 成功");
    println("");
    println("🎉 全38項目のユニオン型機能テスト成功！");
    println("=== ユニオン型包括的統合テスト完了 ===");
    
    return 0;
}
