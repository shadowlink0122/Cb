// Union型詳細エラーケーステスト

typedef StatusUnion = 200 | 404 | 500;
typedef StringUnion = "OK" | "ERROR" | "PENDING";
typedef MixedUnion = int | string | bool;

struct TestStruct {
    StatusUnion status;
    StringUnion message;
    MixedUnion data;
};

int main() {
    println("=== Union型詳細エラーケーステスト ===");
    
    // 正常ケース
    StatusUnion status = 200;
    StringUnion message = "OK";
    MixedUnion data = 42;
    
    println("正常ケース:");
    println("  status: %d", status);
    println("  message: %s", message);
    println("  data: %d", data);
    
    // 動的型変更テスト
    data = "Text data";
    println("  data (string): %s", data);
    
    data = true;
    println("  data (bool): %d", data);
    
    // 構造体でのUnion型テスト
    TestStruct test = {
        status: 404,
        message: "ERROR",
        data: false
    };
    
    println("構造体でのUnion型:");
    println("  status: %d", test.status);
    println("  message: %s", test.message);
    println("  data: %d", test.data);
    
    // 構造体メンバーの動的変更
    test.data = 999;
    println("  data (int): %d", test.data);
    
    test.data = "Updated";
    println("  data (string): %s", test.data);
    
    // 複合代入テスト
    test.data = 10;
    test.data += 5;
    println("  data (compound): %d", test.data);
    
    return 0;
}
