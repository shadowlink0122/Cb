// Array element increment/decrement tests

int[5] g_arr;
float[3] g_farr;
double[3] g_darr;
int[5] g_arr2;
int[2][3] g_matrix;

void test_array_post_increment() {
    g_arr[0] = 1;
    g_arr[1] = 2;
    g_arr[2] = 3;
    g_arr[3] = 4;
    g_arr[4] = 5;
    
    println("Test 1: Array post-increment");
    println("Before: g_arr[2] = %d", g_arr[2]);
    int result = g_arr[2]++;
    println("After: g_arr[2] = %d, result = %d", g_arr[2], result);
    println("");
}

void test_array_pre_increment() {
    g_arr[0] = 1;
    g_arr[1] = 2;
    g_arr[2] = 3;
    g_arr[3] = 4;
    g_arr[4] = 5;
    
    println("Test 2: Array pre-increment");
    println("Before: g_arr[2] = %d", g_arr[2]);
    int result = ++g_arr[2];
    println("After: g_arr[2] = %d, result = %d", g_arr[2], result);
    println("");
}

void test_array_post_decrement() {
    g_arr[0] = 10;
    g_arr[1] = 20;
    g_arr[2] = 30;
    g_arr[3] = 40;
    g_arr[4] = 50;
    
    println("Test 3: Array post-decrement");
    println("Before: g_arr[3] = %d", g_arr[3]);
    int result = g_arr[3]--;
    println("After: g_arr[3] = %d, result = %d", g_arr[3], result);
    println("");
}

void test_array_pre_decrement() {
    g_arr[0] = 10;
    g_arr[1] = 20;
    g_arr[2] = 30;
    g_arr[3] = 40;
    g_arr[4] = 50;
    
    println("Test 4: Array pre-decrement");
    println("Before: g_arr[3] = %d", g_arr[3]);
    int result = --g_arr[3];
    println("After: g_arr[3] = %d, result = %d", g_arr[3], result);
    println("");
}

void test_float_array_increment() {
    g_farr[0] = 1.5;
    g_farr[1] = 2.5;
    g_farr[2] = 3.5;
    
    println("Test 5: Float array increment");
    println("Before: g_farr[1] = %f", g_farr[1]);
    
    // assert前の値を確認（整数変換: 2.5 -> 2）
    int before = g_farr[1];
    assert(before == 2);
    
    g_farr[1]++;
    
    println("After: g_farr[1] = %f", g_farr[1]);
    
    // assert後の値を確認（整数変換: 3.5 -> 3）
    int after = g_farr[1];
    assert(after == 3);
    
    println("");
}

void test_double_array_increment() {
    g_darr[0] = 10.25;
    g_darr[1] = 20.75;
    g_darr[2] = 30.5;
    
    println("Test 6: Double array increment");
    println("Before: g_darr[0] = %f", g_darr[0]);
    
    // assert前の値を確認（整数変換: 10.25 -> 10）
    int before = g_darr[0];
    assert(before == 10);
    
    ++g_darr[0];
    
    println("After: g_darr[0] = %f", g_darr[0]);
    
    // assert後の値を確認（整数変換: 11.25 -> 11）
    int after = g_darr[0];
    assert(after == 11);
    
    println("");
}

void test_loop_with_array_increment() {
    g_arr2[0] = 0;
    g_arr2[1] = 0;
    g_arr2[2] = 0;
    g_arr2[3] = 0;
    g_arr2[4] = 0;
    
    println("Test 7: Loop with array increment");
    println("Before: g_arr2 = {%d, %d, %d, %d, %d}", g_arr2[0], g_arr2[1], g_arr2[2], g_arr2[3], g_arr2[4]);
    
    int i = 0;
    while (i < 5) {
        g_arr2[i]++;
        i++;
    }
    
    println("After: g_arr2 = {%d, %d, %d, %d, %d}", g_arr2[0], g_arr2[1], g_arr2[2], g_arr2[3], g_arr2[4]);
    println("");
}

void test_multidim_array_increment() {
    g_matrix[0][0] = 1;
    g_matrix[0][1] = 2;
    g_matrix[0][2] = 3;
    g_matrix[1][0] = 4;
    g_matrix[1][1] = 5;
    g_matrix[1][2] = 6;
    
    println("Test 8: Multi-dimensional array increment");
    println("Before: g_matrix[0][1] = %d, g_matrix[1][2] = %d", g_matrix[0][1], g_matrix[1][2]);
    g_matrix[0][1]++;
    ++g_matrix[1][2];
    println("After: g_matrix[0][1] = %d, g_matrix[1][2] = %d", g_matrix[0][1], g_matrix[1][2]);
    println("");
}

int main() {
    println("=== Array Increment/Decrement Tests ===");
    println("");
    
    test_array_post_increment();
    test_array_pre_increment();
    test_array_post_decrement();
    test_array_pre_decrement();
    test_float_array_increment();
    test_double_array_increment();
    test_loop_with_array_increment();
    // TODO: test_multidim_array_increment(); // 多次元配列のインクリメントは未実装
    
    println("All array increment/decrement tests completed!");
    return 0;
}
