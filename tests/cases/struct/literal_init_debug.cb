// 構造体リテラル初期化での文字列処理テスト

typedef struct {
    int x;
    int y;
    string label;
} Point;

Point createPointLiteral(int x, int y, string label) {
    println("createPointLiteral: Received x=%d, y=%d, label='%s'", x, y, label);
    
    // 構造体リテラル初期化
    Point p = {x: x, y: y, label: label};
    
    // 作成後の確認
    println("createPointLiteral: Created x=%d, y=%d, label='%s'", p.x, p.y, p.label);
    
    return p;
}

Point createPointMemberwise(int x, int y, string label) {
    println("createPointMemberwise: Received x=%d, y=%d, label='%s'", x, y, label);
    
    // メンバーごとの代入
    Point p;
    p.x = x;
    p.y = y;
    p.label = label;
    
    // 作成後の確認
    println("createPointMemberwise: Created x=%d, y=%d, label='%s'", p.x, p.y, p.label);
    
    return p;
}

int main() {
    println("=== Literal Initialization Test ===");
    Point p1 = createPointLiteral(10, 20, "Literal Init");
    println("Returned: x=%d, y=%d, label='%s'", p1.x, p1.y, p1.label);
    
    println("\n=== Memberwise Assignment Test ===");
    Point p2 = createPointMemberwise(30, 40, "Memberwise");
    println("Returned: x=%d, y=%d, label='%s'", p2.x, p2.y, p2.label);
    
    return 0;
}
