// 構造体メンバの多次元配列と構造体配列の包括的テスト
struct Point {
    int x;
    int y;
};

struct Matrix2x2 {
    int[2][2] data;
    string name;
};

// 構造体配列要素を関数パラメータとして使用
int add_coords(Point p) {
    return p.x + p.y;
}

// 構造体を戻り値として使用
Point create_point(int x, int y) {
    Point result;
    result.x = x;
    result.y = y;
    return result;
}

int main() {
    // 1. 構造体配列要素のメンバーアクセス
    Point[3] points;
    points[0].x = 1;
    points[0].y = 2;
    points[1].x = 3;
    points[1].y = 4;
    
    // 2. 構造体配列要素を関数パラメータとして使用
    int sum1 = add_coords(points[0]);
    int sum2 = add_coords(points[1]);
    
    // 3. 構造体戻り値を配列要素に代入
    points[2] = create_point(5, 6);
    int sum3 = add_coords(points[2]);
    
    // 4. 構造体の多次元配列メンバー
    Matrix2x2 matrix;
    matrix.name = "Test Matrix";
    
    // 個別要素代入
    matrix.data[0][0] = 10;
    matrix.data[0][1] = 20;
    matrix.data[1][0] = 30;
    matrix.data[1][1] = 40;
    
    println("Point sums:", sum1, sum2, sum3);
    println("Matrix name:", matrix.name);
    println("Matrix [0][0]:", matrix.data[0][0]);
    println("Matrix [1][1]:", matrix.data[1][1]);
    
    println("All tests completed successfully");
    
    return 0;
}
