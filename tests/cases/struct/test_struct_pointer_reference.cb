// 構造体のポインタと参照の包括的テスト

struct Node {
    int value;
    Node* next;
};

// ポインタを引数として受け取る
void modify_via_pointer(Node* p) {
    p->value = 999;
}

// 参照を引数として受け取る
void modify_via_reference(Node& n) {
    n.value = 888;
}

// 参照を返す
Node& get_node_ref(Node& n) {
    return n;
}

// 参照でポインタメンバにアクセス
int count_list(Node& head) {
    int count = 1;  // head自身をカウント
    Node* current = head.next;
    while (current != nullptr) {
        count = count + 1;
        current = current->next;
    }
    return count;
}

int main() {
    println("=== Struct Pointer and Reference Comprehensive Test ===");
    
    // Test 1: ポインタメンバの基本
    println("\nTest 1: Basic pointer member");
    Node n1 = {value: 10, next: nullptr};
    Node n2 = {value: 20, next: &n1};
    Node n3 = {value: 30, next: &n2};
    
    println("n3.value = ", n3.value);
    println("n3.next->value = ", n3.next->value);
    println("n3.next->next->value = ", n3.next->next->value);
    
    assert(n3.value == 30);
    assert(n3.next->value == 20);
    assert(n3.next->next->value == 10);
    
    // Test 2: ポインタ引数で変更
    println("\nTest 2: Modify via pointer parameter");
    Node n4 = {value: 100, next: nullptr};
    println("Before: n4.value = ", n4.value);
    modify_via_pointer(&n4);
    println("After: n4.value = ", n4.value);
    assert(n4.value == 999);
    
    // Test 3: 参照引数で変更
    println("\nTest 3: Modify via reference parameter");
    Node n5 = {value: 200, next: nullptr};
    println("Before: n5.value = ", n5.value);
    modify_via_reference(n5);
    println("After: n5.value = ", n5.value);
    assert(n5.value == 888);
    
    // Test 4: 参照を返す関数
    println("\nTest 4: Function returning reference");
    Node n6 = {value: 555, next: nullptr};
    Node& ref_node = get_node_ref(n6);
    println("Reference node value: ", ref_node.value);
    assert(ref_node.value == 555);
    
    ref_node.value = 666;
    println("After modification: n6.value = ", n6.value);
    assert(n6.value == 666);
    
    // Test 5: 参照でリストをカウント
    println("\nTest 5: Count list via reference");
    Node list1 = {value: 1, next: nullptr};
    Node list2 = {value: 2, next: &list1};
    Node list3 = {value: 3, next: &list2};
    
    int count = count_list(list3);
    println("List count: ", count);
    assert(count == 3);
    
    // Test 6: 自己参照構造体（ポインタのみ）
    println("\nTest 6: Self-referential struct (pointer only)");
    Node head = {value: 1, next: nullptr};
    Node mid = {value: 2, next: &head};
    Node tail = {value: 3, next: &mid};
    
    println("Linked list: ", tail.value, " -> ", tail.next->value, " -> ", tail.next->next->value);
    assert(tail.value == 3);
    assert(tail.next->value == 2);
    assert(tail.next->next->value == 1);
    
    println("\n=== All struct pointer and reference tests passed ===");
    return 0;
}
