// リテラルと型推論のテスト
int main() {
    // Float リテラル (fサフィックス)
    float f1 = 3.14f;
    float f2 = 2.71f;
    float f3 = 0.5f;
    float f4 = 100.0f;
    
    println(f1);  // 3.14
    println(f2);  // 2.71
    println(f3);  // 0.5
    println(f4);  // 100.0
    
    // Double リテラル (サフィックスなし)
    double d1 = 3.14159265358979;
    double d2 = 2.71828182845905;
    double d3 = 1.41421356237310;
    
    println(d1);  // 3.14159265358979
    println(d2);  // 2.71828182845905
    println(d3);  // 1.41421356237310
    
    // Unsigned リテラル
    unsigned int u1 = 100;
    unsigned int u2 = 255;  // 0xFF
    unsigned int u3 = 511;  // 0777 8進数
    unsigned int u4 = 255;  // 0b11111111 2進数
    
    println(u1);  // 100
    println(u2);  // 255
    println(u3);  // 511
    println(u4);  // 255
    
    // 混合型演算での型優先順位
    // 整数除算 vs 浮動小数点除算
    int int_div = 1 / 3;
    println(int_div);  // 0
    
    float float_div = 1.0f / 3.0f;
    println(float_div);  // 0.333333...
    
    double double_div = 1.0 / 3.0;
    println(double_div);  // 0.333333...
    
    // 混合型演算 (浮動小数点数が優先)
    float mixed1 = 1 / 3.0f;
    println(mixed1);  // 0.333333...
    
    double mixed2 = 10 / 3.0;
    println(mixed2);  // 3.333333...
    
    float mixed3 = (1.0f / 3.0f) * 3.0f;
    println(mixed3);  // 0.999999... (浮動小数点誤差)
    
    double mixed4 = (1.0 / 3.0) * 3.0;
    println(mixed4);  // 0.999999... (浮動小数点誤差)
    
    // Unsignedと符号付き整数の混合
    unsigned int u_val = 10;
    int i_val = -5;
    
    println(u_val);  // 10
    println(i_val);  // -5
    
    // 大きな数値リテラル
    unsigned int hex = 3735928559;  // 0xDEADBEEF
    unsigned int oct = 493;  // 0755
    unsigned int bin = 170;  // 0b10101010
    
    println(hex);  // 3735928559
    println(oct);  // 493
    println(bin);  // 170
    
    return 0;
}
