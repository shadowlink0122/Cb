// 構造体配列メンバーの全機能テスト

struct Point {
    int x;
    int y;
};

struct Student {
    string name;
    int[3] scores;
};

struct Shape {
    Point[3] points;
    string name;
};

// テスト用関数
Shape createShape() {
    Shape s;
    s.name = "FunctionShape";
    s.points[0].x = 1;
    s.points[0].y = 2;
    s.points[1].x = 3;
    s.points[1].y = 4;
    s.points[2].x = 5;
    s.points[2].y = 6;
    return s;
}

Student createStudent() {
    Student s;
    s.name = "Alice";
    s.scores[0] = 85;
    s.scores[1] = 90;
    s.scores[2] = 78;
    return s;
}

int main() {
    println("=== Feature 1: Struct Literal with Struct Array ===");
    Shape triangle = {[{0, 0}, {10, 0}, {5, 8}], "Triangle"};
    println("Name: %s", triangle.name);
    println("Points: (%d,%d), (%d,%d), (%d,%d)", 
            triangle.points[0].x, triangle.points[0].y,
            triangle.points[1].x, triangle.points[1].y,
            triangle.points[2].x, triangle.points[2].y);
    
    println("\n=== Feature 2: Struct Literal with Primitive Array ===");
    Student bob = {"Bob", [95, 88, 92]};
    println("Name: %s", bob.name);
    println("Scores: [%d, %d, %d]", bob.scores[0], bob.scores[1], bob.scores[2]);
    
    println("\n=== Feature 3: Individual Assignment (Struct Array) ===");
    Shape square;
    square.name = "Square";
    square.points[0].x = 0;
    square.points[0].y = 0;
    square.points[1].x = 10;
    square.points[1].y = 0;
    square.points[2].x = 10;
    square.points[2].y = 10;
    println("Name: %s", square.name);
    println("Points: (%d,%d), (%d,%d), (%d,%d)", 
            square.points[0].x, square.points[0].y,
            square.points[1].x, square.points[1].y,
            square.points[2].x, square.points[2].y);
    
    println("\n=== Feature 4: Individual Assignment (Primitive Array) ===");
    Student charlie;
    charlie.name = "Charlie";
    charlie.scores[0] = 75;
    charlie.scores[1] = 82;
    charlie.scores[2] = 88;
    println("Name: %s", charlie.name);
    println("Scores: [%d, %d, %d]", charlie.scores[0], charlie.scores[1], charlie.scores[2]);
    
    println("\n=== Feature 5: Function Return (Struct Array) ===");
    Shape funcShape = createShape();
    println("Name: %s", funcShape.name);
    println("Points: (%d,%d), (%d,%d), (%d,%d)", 
            funcShape.points[0].x, funcShape.points[0].y,
            funcShape.points[1].x, funcShape.points[1].y,
            funcShape.points[2].x, funcShape.points[2].y);
    
    println("\n=== Feature 6: Function Return (Primitive Array) ===");
    Student student1 = createStudent();
    println("Name: %s", student1.name);
    println("Scores: [%d, %d, %d]", student1.scores[0], student1.scores[1], student1.scores[2]);
    
    return 0;
}
