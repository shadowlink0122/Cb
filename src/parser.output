Useless nonterminals

   opt_statement


Useless rules

  110 opt_statement: statement
  111              | expr
  112              | /* empty */


Rules never reduced

   12 typelist: type

   45 if_stmt: IF '(' expr ')' '{' program '}'
   47        | IF '(' expr ')' statement ELSE if_stmt
   49        | IF '(' expr ')' '{' program '}' ELSE '{' program '}'
   50        | IF '(' expr ')' '{' program '}' ELSE if_stmt


State 0 conflicts: 8 shift/reduce
State 10 conflicts: 7 shift/reduce
State 13 conflicts: 1 shift/reduce
State 43 conflicts: 8 shift/reduce
State 47 conflicts: 1 shift/reduce
State 53 conflicts: 14 reduce/reduce
State 75 conflicts: 2 shift/reduce
State 184 conflicts: 8 shift/reduce
State 185 conflicts: 8 shift/reduce
State 187 conflicts: 1 shift/reduce, 1 reduce/reduce
State 188 conflicts: 1 shift/reduce
State 193 conflicts: 7 shift/reduce
State 211 conflicts: 1 shift/reduce, 29 reduce/reduce
State 213 conflicts: 29 reduce/reduce
State 216 conflicts: 8 shift/reduce
State 217 conflicts: 8 shift/reduce
State 219 conflicts: 29 reduce/reduce
State 223 conflicts: 29 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: decls stmts
    2        | funcdef

    3 decls: /* empty */
    4      | decls decl_statement

    5 stmts: /* empty */
    6      | stmts nondecl_statement
    7      | stmts funcdef

    8 funcdef: typelist IDENTIFIER '(' paramlist ')' '{' block '}'
    9        | type IDENTIFIER '(' paramlist ')' '{' block '}'

   10 block: decls stmts

   11 typelist: '(' type_list_items ')'
   12         | type

   13 type_decl: type
   14          | CONST type

   15 type_list_items: type
   16                | type_list_items ',' type

   17 type: VOID
   18     | TINY
   19     | SHORT
   20     | INT
   21     | LONG
   22     | STRING
   23     | BOOL

   24 returnstmt: RETURN expr SEMICOLON
   25           | RETURN SEMICOLON

   26 statement: decl_statement
   27          | nondecl_statement
   28          | funcdef

   29 decl_statement: type_decl IDENTIFIER SEMICOLON
   30               | type_decl IDENTIFIER ASSIGN postfix_expr SEMICOLON
   31               | type_decl IDENTIFIER '[' expr ']' SEMICOLON
   32               | type_decl IDENTIFIER '[' ']' ASSIGN array_literal SEMICOLON

   33 nondecl_statement: IDENTIFIER ASSIGN expr SEMICOLON
   34                  | IDENTIFIER '[' expr ']' ASSIGN expr SEMICOLON
   35                  | PRINT expr SEMICOLON
   36                  | returnstmt
   37                  | BREAK SEMICOLON
   38                  | BREAK expr SEMICOLON
   39                  | FOR '(' init_statement SEMICOLON opt_expr SEMICOLON opt_update ')' '{' program '}'
   40                  | WHILE '(' expr ')' '{' program '}'
   41                  | '{' program '}'
   42                  | if_stmt
   43                  | expr SEMICOLON

   44 if_stmt: IF '(' expr ')' statement
   45        | IF '(' expr ')' '{' program '}'
   46        | IF '(' expr ')' statement ELSE statement
   47        | IF '(' expr ')' statement ELSE if_stmt
   48        | IF '(' expr ')' '{' program '}' ELSE statement
   49        | IF '(' expr ')' '{' program '}' ELSE '{' program '}'
   50        | IF '(' expr ')' '{' program '}' ELSE if_stmt

   51 opt_update: expr
   52           | /* empty */

   53 init_statement: type_decl IDENTIFIER ASSIGN expr
   54               | IDENTIFIER ASSIGN expr
   55               | compound_assign
   56               | /* empty */

   57 opt_expr: expr
   58         | compound_assign
   59         | /* empty */

   60 paramlist: /* empty */
   61          | paramlist_nonempty

   62 paramlist_nonempty: type_decl IDENTIFIER
   63                   | paramlist_nonempty ',' type_decl IDENTIFIER

   64 expr: expr EQ term
   65     | expr NEQ term
   66     | expr GT term
   67     | expr LT term
   68     | expr GE term
   69     | expr LE term
   70     | expr OR term
   71     | expr AND term
   72     | expr PLUS term
   73     | expr MINUS term
   74     | term
   75     | postfix_expr

   76 compound_assign: IDENTIFIER ADD_ASSIGN expr
   77                | IDENTIFIER SUB_ASSIGN expr
   78                | IDENTIFIER MUL_ASSIGN expr
   79                | IDENTIFIER DIV_ASSIGN expr
   80                | IDENTIFIER MOD_ASSIGN expr

   81 term: term MUL postfix_expr
   82     | term DIV postfix_expr
   83     | term MOD postfix_expr
   84     | postfix_expr

   85 postfix_expr: primary_expr
   86             | postfix_expr INC_OP
   87             | postfix_expr DEC_OP

   88 primary_expr: INC_OP IDENTIFIER
   89             | DEC_OP IDENTIFIER
   90             | NOT postfix_expr
   91             | IDENTIFIER '[' expr ']'
   92             | array_literal
   93             | '(' expr ')'
   94             | type NUMBER
   95             | TRUE
   96             | FALSE
   97             | NULL_LIT
   98             | STRING_LITERAL
   99             | MINUS postfix_expr
  100             | NUMBER
  101             | IDENTIFIER '(' arglist ')'
  102             | IDENTIFIER '(' ')'
  103             | IDENTIFIER

  104 arglist: expr
  105        | arglist ',' expr

  106 array_literal: '[' array_init_list ']'
  107              | '[' ']'

  108 array_init_list: expr
  109                | array_init_list ',' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 8 9 11 39 40 44 45 46 47 48 49 50 93 101 102
')' (41) 8 9 11 39 40 44 45 46 47 48 49 50 93 101 102
',' (44) 16 63 105 109
'[' (91) 31 32 34 91 106 107
']' (93) 31 32 34 91 106 107
'{' (123) 8 9 39 40 41 45 48 49 50
'}' (125) 8 9 39 40 41 45 48 49 50
error (256)
NUMBER (258) 94 100
IDENTIFIER (259) 8 9 29 30 31 32 33 34 53 54 62 63 76 77 78 79 80 88
    89 91 101 102 103
STRING (260) 22
STRING_LITERAL (261) 98
VOID (262) 17
TINY (263) 18
SHORT (264) 19
INT (265) 20
LONG (266) 21
BOOL (267) 23
CONST (268) 14
TRUE (269) 95
FALSE (270) 96
NULL_LIT (271) 97
PLUS (272) 72
MINUS (273) 73 99
MUL (274) 81
DIV (275) 82
ASSIGN (276) 30 32 33 34 53 54
SEMICOLON (277) 24 25 29 30 31 32 33 34 35 37 38 39 43
PRINT (278) 35
RETURN (279) 24 25
FOR (280) 39
WHILE (281) 40
BREAK (282) 37 38
IF (283) 44 45 46 47 48 49 50
ELSE (284) 46 47 48 49 50
EQ (285) 64
NEQ (286) 65
GE (287) 68
LE (288) 69
GT (289) 66
LT (290) 67
OR (291) 70
AND (292) 71
NOT (293) 90
MOD (294) 83
ADD_ASSIGN (295) 76
SUB_ASSIGN (296) 77
MUL_ASSIGN (297) 78
DIV_ASSIGN (298) 79
MOD_ASSIGN (299) 80
INC_OP (300) 86 88
DEC_OP (301) 87 89


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
program (55)
    on left: 1 2, on right: 0 39 40 41 45 48 49 50
decls (56)
    on left: 3 4, on right: 1 4 10
stmts (57)
    on left: 5 6 7, on right: 1 6 7 10
funcdef (58)
    on left: 8 9, on right: 2 7 28
block (59)
    on left: 10, on right: 8 9
typelist (60)
    on left: 11 12, on right: 8
type_decl (61)
    on left: 13 14, on right: 29 30 31 32 53 62 63
type_list_items (62)
    on left: 15 16, on right: 11 16
type (63)
    on left: 17 18 19 20 21 22 23, on right: 9 12 13 14 15 16 94
returnstmt (64)
    on left: 24 25, on right: 36
statement (65)
    on left: 26 27 28, on right: 44 46 47 48
decl_statement (66)
    on left: 29 30 31 32, on right: 4 26
nondecl_statement (67)
    on left: 33 34 35 36 37 38 39 40 41 42 43, on right: 6 27
if_stmt (68)
    on left: 44 45 46 47 48 49 50, on right: 42 47 50
opt_update (69)
    on left: 51 52, on right: 39
init_statement (70)
    on left: 53 54 55 56, on right: 39
opt_expr (71)
    on left: 57 58 59, on right: 39
paramlist (72)
    on left: 60 61, on right: 8 9
paramlist_nonempty (73)
    on left: 62 63, on right: 61 63
expr (74)
    on left: 64 65 66 67 68 69 70 71 72 73 74 75, on right: 24 31 33
    34 35 38 40 43 44 45 46 47 48 49 50 51 53 54 57 64 65 66 67 68
    69 70 71 72 73 76 77 78 79 80 91 93 104 105 108 109
compound_assign (75)
    on left: 76 77 78 79 80, on right: 55 58
term (76)
    on left: 81 82 83 84, on right: 64 65 66 67 68 69 70 71 72 73 74
    81 82 83
postfix_expr (77)
    on left: 85 86 87, on right: 30 75 81 82 83 84 86 87 90 99
primary_expr (78)
    on left: 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103,
    on right: 85
arglist (79)
    on left: 104 105, on right: 101 105
array_literal (80)
    on left: 106 107, on right: 32 92
array_init_list (81)
    on left: 108 109, on right: 106 109


state 0

    0 $accept: . program $end

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    '('     shift, and go to state 8

    STRING    [reduce using rule 3 (decls)]
    VOID      [reduce using rule 3 (decls)]
    TINY      [reduce using rule 3 (decls)]
    SHORT     [reduce using rule 3 (decls)]
    INT       [reduce using rule 3 (decls)]
    LONG      [reduce using rule 3 (decls)]
    BOOL      [reduce using rule 3 (decls)]
    '('       [reduce using rule 3 (decls)]
    $default  reduce using rule 3 (decls)

    program   go to state 9
    decls     go to state 10
    funcdef   go to state 11
    typelist  go to state 12
    type      go to state 13


state 1

   22 type: STRING .

    $default  reduce using rule 22 (type)


state 2

   17 type: VOID .

    $default  reduce using rule 17 (type)


state 3

   18 type: TINY .

    $default  reduce using rule 18 (type)


state 4

   19 type: SHORT .

    $default  reduce using rule 19 (type)


state 5

   20 type: INT .

    $default  reduce using rule 20 (type)


state 6

   21 type: LONG .

    $default  reduce using rule 21 (type)


state 7

   23 type: BOOL .

    $default  reduce using rule 23 (type)


state 8

   11 typelist: '(' . type_list_items ')'

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7

    type_list_items  go to state 14
    type             go to state 15


state 9

    0 $accept: program . $end

    $end  shift, and go to state 16


state 10

    1 program: decls . stmts
    4 decls: decls . decl_statement

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    CONST   shift, and go to state 17

    STRING    [reduce using rule 5 (stmts)]
    VOID      [reduce using rule 5 (stmts)]
    TINY      [reduce using rule 5 (stmts)]
    SHORT     [reduce using rule 5 (stmts)]
    INT       [reduce using rule 5 (stmts)]
    LONG      [reduce using rule 5 (stmts)]
    BOOL      [reduce using rule 5 (stmts)]
    $default  reduce using rule 5 (stmts)

    stmts           go to state 18
    type_decl       go to state 19
    type            go to state 20
    decl_statement  go to state 21


state 11

    2 program: funcdef .

    $default  reduce using rule 2 (program)


state 12

    8 funcdef: typelist . IDENTIFIER '(' paramlist ')' '{' block '}'

    IDENTIFIER  shift, and go to state 22


state 13

    9 funcdef: type . IDENTIFIER '(' paramlist ')' '{' block '}'
   12 typelist: type .

    IDENTIFIER  shift, and go to state 23

    IDENTIFIER  [reduce using rule 12 (typelist)]


state 14

   11 typelist: '(' type_list_items . ')'
   16 type_list_items: type_list_items . ',' type

    ')'  shift, and go to state 24
    ','  shift, and go to state 25


state 15

   15 type_list_items: type .

    $default  reduce using rule 15 (type_list_items)


state 16

    0 $accept: program $end .

    $default  accept


state 17

   14 type_decl: CONST . type

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7

    type  go to state 26


state 18

    1 program: decls stmts .
    6 stmts: stmts . nondecl_statement
    7      | stmts . funcdef

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 28
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    PRINT           shift, and go to state 34
    RETURN          shift, and go to state 35
    FOR             shift, and go to state 36
    WHILE           shift, and go to state 37
    BREAK           shift, and go to state 38
    IF              shift, and go to state 39
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '{'             shift, and go to state 43
    '('             shift, and go to state 44
    '['             shift, and go to state 45

    $default  reduce using rule 1 (program)

    funcdef            go to state 46
    typelist           go to state 12
    type               go to state 47
    returnstmt         go to state 48
    nondecl_statement  go to state 49
    if_stmt            go to state 50
    expr               go to state 51
    term               go to state 52
    postfix_expr       go to state 53
    primary_expr       go to state 54
    array_literal      go to state 55


state 19

   29 decl_statement: type_decl . IDENTIFIER SEMICOLON
   30               | type_decl . IDENTIFIER ASSIGN postfix_expr SEMICOLON
   31               | type_decl . IDENTIFIER '[' expr ']' SEMICOLON
   32               | type_decl . IDENTIFIER '[' ']' ASSIGN array_literal SEMICOLON

    IDENTIFIER  shift, and go to state 56


state 20

   13 type_decl: type .

    $default  reduce using rule 13 (type_decl)


state 21

    4 decls: decls decl_statement .

    $default  reduce using rule 4 (decls)


state 22

    8 funcdef: typelist IDENTIFIER . '(' paramlist ')' '{' block '}'

    '('  shift, and go to state 57


state 23

    9 funcdef: type IDENTIFIER . '(' paramlist ')' '{' block '}'

    '('  shift, and go to state 58


state 24

   11 typelist: '(' type_list_items ')' .

    $default  reduce using rule 11 (typelist)


state 25

   16 type_list_items: type_list_items ',' . type

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7

    type  go to state 59


state 26

   14 type_decl: CONST type .

    $default  reduce using rule 14 (type_decl)


state 27

  100 primary_expr: NUMBER .

    $default  reduce using rule 100 (primary_expr)


state 28

   33 nondecl_statement: IDENTIFIER . ASSIGN expr SEMICOLON
   34                  | IDENTIFIER . '[' expr ']' ASSIGN expr SEMICOLON
   91 primary_expr: IDENTIFIER . '[' expr ']'
  101             | IDENTIFIER . '(' arglist ')'
  102             | IDENTIFIER . '(' ')'
  103             | IDENTIFIER .

    ASSIGN  shift, and go to state 60
    '('     shift, and go to state 61
    '['     shift, and go to state 62

    $default  reduce using rule 103 (primary_expr)


state 29

   98 primary_expr: STRING_LITERAL .

    $default  reduce using rule 98 (primary_expr)


state 30

   95 primary_expr: TRUE .

    $default  reduce using rule 95 (primary_expr)


state 31

   96 primary_expr: FALSE .

    $default  reduce using rule 96 (primary_expr)


state 32

   97 primary_expr: NULL_LIT .

    $default  reduce using rule 97 (primary_expr)


state 33

   99 primary_expr: MINUS . postfix_expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    postfix_expr   go to state 66
    primary_expr   go to state 54
    array_literal  go to state 55


state 34

   35 nondecl_statement: PRINT . expr SEMICOLON

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 67
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 35

   24 returnstmt: RETURN . expr SEMICOLON
   25           | RETURN . SEMICOLON

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    SEMICOLON       shift, and go to state 68
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 69
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 36

   39 nondecl_statement: FOR . '(' init_statement SEMICOLON opt_expr SEMICOLON opt_update ')' '{' program '}'

    '('  shift, and go to state 70


state 37

   40 nondecl_statement: WHILE . '(' expr ')' '{' program '}'

    '('  shift, and go to state 71


state 38

   37 nondecl_statement: BREAK . SEMICOLON
   38                  | BREAK . expr SEMICOLON

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    SEMICOLON       shift, and go to state 72
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 73
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 39

   44 if_stmt: IF . '(' expr ')' statement
   45        | IF . '(' expr ')' '{' program '}'
   46        | IF . '(' expr ')' statement ELSE statement
   47        | IF . '(' expr ')' statement ELSE if_stmt
   48        | IF . '(' expr ')' '{' program '}' ELSE statement
   49        | IF . '(' expr ')' '{' program '}' ELSE '{' program '}'
   50        | IF . '(' expr ')' '{' program '}' ELSE if_stmt

    '('  shift, and go to state 74


state 40

   90 primary_expr: NOT . postfix_expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    postfix_expr   go to state 75
    primary_expr   go to state 54
    array_literal  go to state 55


state 41

   88 primary_expr: INC_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 76


state 42

   89 primary_expr: DEC_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 77


state 43

   41 nondecl_statement: '{' . program '}'

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    '('     shift, and go to state 8

    STRING    [reduce using rule 3 (decls)]
    VOID      [reduce using rule 3 (decls)]
    TINY      [reduce using rule 3 (decls)]
    SHORT     [reduce using rule 3 (decls)]
    INT       [reduce using rule 3 (decls)]
    LONG      [reduce using rule 3 (decls)]
    BOOL      [reduce using rule 3 (decls)]
    '('       [reduce using rule 3 (decls)]
    $default  reduce using rule 3 (decls)

    program   go to state 78
    decls     go to state 10
    funcdef   go to state 11
    typelist  go to state 12
    type      go to state 13


state 44

   11 typelist: '(' . type_list_items ')'
   93 primary_expr: '(' . expr ')'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type_list_items  go to state 14
    type             go to state 79
    expr             go to state 80
    term             go to state 52
    postfix_expr     go to state 53
    primary_expr     go to state 54
    array_literal    go to state 55


state 45

  106 array_literal: '[' . array_init_list ']'
  107              | '[' . ']'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45
    ']'             shift, and go to state 81

    type             go to state 65
    expr             go to state 82
    term             go to state 52
    postfix_expr     go to state 53
    primary_expr     go to state 54
    array_literal    go to state 55
    array_init_list  go to state 83


state 46

    7 stmts: stmts funcdef .

    $default  reduce using rule 7 (stmts)


state 47

    9 funcdef: type . IDENTIFIER '(' paramlist ')' '{' block '}'
   12 typelist: type .
   94 primary_expr: type . NUMBER

    NUMBER      shift, and go to state 84
    IDENTIFIER  shift, and go to state 23

    IDENTIFIER  [reduce using rule 12 (typelist)]


state 48

   36 nondecl_statement: returnstmt .

    $default  reduce using rule 36 (nondecl_statement)


state 49

    6 stmts: stmts nondecl_statement .

    $default  reduce using rule 6 (stmts)


state 50

   42 nondecl_statement: if_stmt .

    $default  reduce using rule 42 (nondecl_statement)


state 51

   43 nondecl_statement: expr . SEMICOLON
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS       shift, and go to state 85
    MINUS      shift, and go to state 86
    SEMICOLON  shift, and go to state 87
    EQ         shift, and go to state 88
    NEQ        shift, and go to state 89
    GE         shift, and go to state 90
    LE         shift, and go to state 91
    GT         shift, and go to state 92
    LT         shift, and go to state 93
    OR         shift, and go to state 94
    AND        shift, and go to state 95


state 52

   74 expr: term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 74 (expr)


state 53

   75 expr: postfix_expr .
   84 term: postfix_expr .
   86 postfix_expr: postfix_expr . INC_OP
   87             | postfix_expr . DEC_OP

    INC_OP  shift, and go to state 99
    DEC_OP  shift, and go to state 100

    PLUS       reduce using rule 75 (expr)
    PLUS       [reduce using rule 84 (term)]
    MINUS      reduce using rule 75 (expr)
    MINUS      [reduce using rule 84 (term)]
    MUL        reduce using rule 84 (term)
    DIV        reduce using rule 84 (term)
    SEMICOLON  reduce using rule 75 (expr)
    SEMICOLON  [reduce using rule 84 (term)]
    EQ         reduce using rule 75 (expr)
    EQ         [reduce using rule 84 (term)]
    NEQ        reduce using rule 75 (expr)
    NEQ        [reduce using rule 84 (term)]
    GE         reduce using rule 75 (expr)
    GE         [reduce using rule 84 (term)]
    LE         reduce using rule 75 (expr)
    LE         [reduce using rule 84 (term)]
    GT         reduce using rule 75 (expr)
    GT         [reduce using rule 84 (term)]
    LT         reduce using rule 75 (expr)
    LT         [reduce using rule 84 (term)]
    OR         reduce using rule 75 (expr)
    OR         [reduce using rule 84 (term)]
    AND        reduce using rule 75 (expr)
    AND        [reduce using rule 84 (term)]
    MOD        reduce using rule 84 (term)
    ')'        reduce using rule 75 (expr)
    ')'        [reduce using rule 84 (term)]
    ']'        reduce using rule 75 (expr)
    ']'        [reduce using rule 84 (term)]
    ','        reduce using rule 75 (expr)
    ','        [reduce using rule 84 (term)]
    $default   reduce using rule 75 (expr)


state 54

   85 postfix_expr: primary_expr .

    $default  reduce using rule 85 (postfix_expr)


state 55

   92 primary_expr: array_literal .

    $default  reduce using rule 92 (primary_expr)


state 56

   29 decl_statement: type_decl IDENTIFIER . SEMICOLON
   30               | type_decl IDENTIFIER . ASSIGN postfix_expr SEMICOLON
   31               | type_decl IDENTIFIER . '[' expr ']' SEMICOLON
   32               | type_decl IDENTIFIER . '[' ']' ASSIGN array_literal SEMICOLON

    ASSIGN     shift, and go to state 101
    SEMICOLON  shift, and go to state 102
    '['        shift, and go to state 103


state 57

    8 funcdef: typelist IDENTIFIER '(' . paramlist ')' '{' block '}'

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    CONST   shift, and go to state 17

    $default  reduce using rule 60 (paramlist)

    type_decl           go to state 104
    type                go to state 20
    paramlist           go to state 105
    paramlist_nonempty  go to state 106


state 58

    9 funcdef: type IDENTIFIER '(' . paramlist ')' '{' block '}'

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    CONST   shift, and go to state 17

    $default  reduce using rule 60 (paramlist)

    type_decl           go to state 104
    type                go to state 20
    paramlist           go to state 107
    paramlist_nonempty  go to state 106


state 59

   16 type_list_items: type_list_items ',' type .

    $default  reduce using rule 16 (type_list_items)


state 60

   33 nondecl_statement: IDENTIFIER ASSIGN . expr SEMICOLON

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 108
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 61

  101 primary_expr: IDENTIFIER '(' . arglist ')'
  102             | IDENTIFIER '(' . ')'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    ')'             shift, and go to state 109
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 110
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    arglist        go to state 111
    array_literal  go to state 55


state 62

   34 nondecl_statement: IDENTIFIER '[' . expr ']' ASSIGN expr SEMICOLON
   91 primary_expr: IDENTIFIER '[' . expr ']'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 112
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 63

   91 primary_expr: IDENTIFIER . '[' expr ']'
  101             | IDENTIFIER . '(' arglist ')'
  102             | IDENTIFIER . '(' ')'
  103             | IDENTIFIER .

    '('  shift, and go to state 61
    '['  shift, and go to state 113

    $default  reduce using rule 103 (primary_expr)


state 64

   93 primary_expr: '(' . expr ')'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 80
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 65

   94 primary_expr: type . NUMBER

    NUMBER  shift, and go to state 84


state 66

   86 postfix_expr: postfix_expr . INC_OP
   87             | postfix_expr . DEC_OP
   99 primary_expr: MINUS postfix_expr .

    INC_OP  shift, and go to state 99
    DEC_OP  shift, and go to state 100

    $default  reduce using rule 99 (primary_expr)


state 67

   35 nondecl_statement: PRINT expr . SEMICOLON
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS       shift, and go to state 85
    MINUS      shift, and go to state 86
    SEMICOLON  shift, and go to state 114
    EQ         shift, and go to state 88
    NEQ        shift, and go to state 89
    GE         shift, and go to state 90
    LE         shift, and go to state 91
    GT         shift, and go to state 92
    LT         shift, and go to state 93
    OR         shift, and go to state 94
    AND        shift, and go to state 95


state 68

   25 returnstmt: RETURN SEMICOLON .

    $default  reduce using rule 25 (returnstmt)


state 69

   24 returnstmt: RETURN expr . SEMICOLON
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS       shift, and go to state 85
    MINUS      shift, and go to state 86
    SEMICOLON  shift, and go to state 115
    EQ         shift, and go to state 88
    NEQ        shift, and go to state 89
    GE         shift, and go to state 90
    LE         shift, and go to state 91
    GT         shift, and go to state 92
    LT         shift, and go to state 93
    OR         shift, and go to state 94
    AND        shift, and go to state 95


state 70

   39 nondecl_statement: FOR '(' . init_statement SEMICOLON opt_expr SEMICOLON opt_update ')' '{' program '}'

    IDENTIFIER  shift, and go to state 116
    STRING      shift, and go to state 1
    VOID        shift, and go to state 2
    TINY        shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    BOOL        shift, and go to state 7
    CONST       shift, and go to state 17

    $default  reduce using rule 56 (init_statement)

    type_decl        go to state 117
    type             go to state 20
    init_statement   go to state 118
    compound_assign  go to state 119


state 71

   40 nondecl_statement: WHILE '(' . expr ')' '{' program '}'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 120
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 72

   37 nondecl_statement: BREAK SEMICOLON .

    $default  reduce using rule 37 (nondecl_statement)


state 73

   38 nondecl_statement: BREAK expr . SEMICOLON
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS       shift, and go to state 85
    MINUS      shift, and go to state 86
    SEMICOLON  shift, and go to state 121
    EQ         shift, and go to state 88
    NEQ        shift, and go to state 89
    GE         shift, and go to state 90
    LE         shift, and go to state 91
    GT         shift, and go to state 92
    LT         shift, and go to state 93
    OR         shift, and go to state 94
    AND        shift, and go to state 95


state 74

   44 if_stmt: IF '(' . expr ')' statement
   45        | IF '(' . expr ')' '{' program '}'
   46        | IF '(' . expr ')' statement ELSE statement
   47        | IF '(' . expr ')' statement ELSE if_stmt
   48        | IF '(' . expr ')' '{' program '}' ELSE statement
   49        | IF '(' . expr ')' '{' program '}' ELSE '{' program '}'
   50        | IF '(' . expr ')' '{' program '}' ELSE if_stmt

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 122
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 75

   86 postfix_expr: postfix_expr . INC_OP
   87             | postfix_expr . DEC_OP
   90 primary_expr: NOT postfix_expr .

    INC_OP  shift, and go to state 99
    DEC_OP  shift, and go to state 100

    INC_OP    [reduce using rule 90 (primary_expr)]
    DEC_OP    [reduce using rule 90 (primary_expr)]
    $default  reduce using rule 90 (primary_expr)


state 76

   88 primary_expr: INC_OP IDENTIFIER .

    $default  reduce using rule 88 (primary_expr)


state 77

   89 primary_expr: DEC_OP IDENTIFIER .

    $default  reduce using rule 89 (primary_expr)


state 78

   41 nondecl_statement: '{' program . '}'

    '}'  shift, and go to state 123


state 79

   15 type_list_items: type .
   94 primary_expr: type . NUMBER

    NUMBER  shift, and go to state 84

    $default  reduce using rule 15 (type_list_items)


state 80

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
   93 primary_expr: '(' expr . ')'

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95
    ')'    shift, and go to state 124


state 81

  107 array_literal: '[' ']' .

    $default  reduce using rule 107 (array_literal)


state 82

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
  108 array_init_list: expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 108 (array_init_list)


state 83

  106 array_literal: '[' array_init_list . ']'
  109 array_init_list: array_init_list . ',' expr

    ']'  shift, and go to state 125
    ','  shift, and go to state 126


state 84

   94 primary_expr: type NUMBER .

    $default  reduce using rule 94 (primary_expr)


state 85

   72 expr: expr PLUS . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 127
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 86

   73 expr: expr MINUS . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 129
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 87

   43 nondecl_statement: expr SEMICOLON .

    $default  reduce using rule 43 (nondecl_statement)


state 88

   64 expr: expr EQ . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 130
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 89

   65 expr: expr NEQ . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 131
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 90

   68 expr: expr GE . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 132
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 91

   69 expr: expr LE . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 133
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 92

   66 expr: expr GT . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 134
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 93

   67 expr: expr LT . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 135
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 94

   70 expr: expr OR . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 136
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 95

   71 expr: expr AND . term

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    term           go to state 137
    postfix_expr   go to state 128
    primary_expr   go to state 54
    array_literal  go to state 55


state 96

   81 term: term MUL . postfix_expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    postfix_expr   go to state 138
    primary_expr   go to state 54
    array_literal  go to state 55


state 97

   82 term: term DIV . postfix_expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    postfix_expr   go to state 139
    primary_expr   go to state 54
    array_literal  go to state 55


state 98

   83 term: term MOD . postfix_expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    postfix_expr   go to state 140
    primary_expr   go to state 54
    array_literal  go to state 55


state 99

   86 postfix_expr: postfix_expr INC_OP .

    $default  reduce using rule 86 (postfix_expr)


state 100

   87 postfix_expr: postfix_expr DEC_OP .

    $default  reduce using rule 87 (postfix_expr)


state 101

   30 decl_statement: type_decl IDENTIFIER ASSIGN . postfix_expr SEMICOLON

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    postfix_expr   go to state 141
    primary_expr   go to state 54
    array_literal  go to state 55


state 102

   29 decl_statement: type_decl IDENTIFIER SEMICOLON .

    $default  reduce using rule 29 (decl_statement)


state 103

   31 decl_statement: type_decl IDENTIFIER '[' . expr ']' SEMICOLON
   32               | type_decl IDENTIFIER '[' . ']' ASSIGN array_literal SEMICOLON

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45
    ']'             shift, and go to state 142

    type           go to state 65
    expr           go to state 143
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 104

   62 paramlist_nonempty: type_decl . IDENTIFIER

    IDENTIFIER  shift, and go to state 144


state 105

    8 funcdef: typelist IDENTIFIER '(' paramlist . ')' '{' block '}'

    ')'  shift, and go to state 145


state 106

   61 paramlist: paramlist_nonempty .
   63 paramlist_nonempty: paramlist_nonempty . ',' type_decl IDENTIFIER

    ','  shift, and go to state 146

    $default  reduce using rule 61 (paramlist)


state 107

    9 funcdef: type IDENTIFIER '(' paramlist . ')' '{' block '}'

    ')'  shift, and go to state 147


state 108

   33 nondecl_statement: IDENTIFIER ASSIGN expr . SEMICOLON
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS       shift, and go to state 85
    MINUS      shift, and go to state 86
    SEMICOLON  shift, and go to state 148
    EQ         shift, and go to state 88
    NEQ        shift, and go to state 89
    GE         shift, and go to state 90
    LE         shift, and go to state 91
    GT         shift, and go to state 92
    LT         shift, and go to state 93
    OR         shift, and go to state 94
    AND        shift, and go to state 95


state 109

  102 primary_expr: IDENTIFIER '(' ')' .

    $default  reduce using rule 102 (primary_expr)


state 110

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
  104 arglist: expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 104 (arglist)


state 111

  101 primary_expr: IDENTIFIER '(' arglist . ')'
  105 arglist: arglist . ',' expr

    ')'  shift, and go to state 149
    ','  shift, and go to state 150


state 112

   34 nondecl_statement: IDENTIFIER '[' expr . ']' ASSIGN expr SEMICOLON
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
   91 primary_expr: IDENTIFIER '[' expr . ']'

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95
    ']'    shift, and go to state 151


state 113

   91 primary_expr: IDENTIFIER '[' . expr ']'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 152
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 114

   35 nondecl_statement: PRINT expr SEMICOLON .

    $default  reduce using rule 35 (nondecl_statement)


state 115

   24 returnstmt: RETURN expr SEMICOLON .

    $default  reduce using rule 24 (returnstmt)


state 116

   54 init_statement: IDENTIFIER . ASSIGN expr
   76 compound_assign: IDENTIFIER . ADD_ASSIGN expr
   77                | IDENTIFIER . SUB_ASSIGN expr
   78                | IDENTIFIER . MUL_ASSIGN expr
   79                | IDENTIFIER . DIV_ASSIGN expr
   80                | IDENTIFIER . MOD_ASSIGN expr

    ASSIGN      shift, and go to state 153
    ADD_ASSIGN  shift, and go to state 154
    SUB_ASSIGN  shift, and go to state 155
    MUL_ASSIGN  shift, and go to state 156
    DIV_ASSIGN  shift, and go to state 157
    MOD_ASSIGN  shift, and go to state 158


state 117

   53 init_statement: type_decl . IDENTIFIER ASSIGN expr

    IDENTIFIER  shift, and go to state 159


state 118

   39 nondecl_statement: FOR '(' init_statement . SEMICOLON opt_expr SEMICOLON opt_update ')' '{' program '}'

    SEMICOLON  shift, and go to state 160


state 119

   55 init_statement: compound_assign .

    $default  reduce using rule 55 (init_statement)


state 120

   40 nondecl_statement: WHILE '(' expr . ')' '{' program '}'
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95
    ')'    shift, and go to state 161


state 121

   38 nondecl_statement: BREAK expr SEMICOLON .

    $default  reduce using rule 38 (nondecl_statement)


state 122

   44 if_stmt: IF '(' expr . ')' statement
   45        | IF '(' expr . ')' '{' program '}'
   46        | IF '(' expr . ')' statement ELSE statement
   47        | IF '(' expr . ')' statement ELSE if_stmt
   48        | IF '(' expr . ')' '{' program '}' ELSE statement
   49        | IF '(' expr . ')' '{' program '}' ELSE '{' program '}'
   50        | IF '(' expr . ')' '{' program '}' ELSE if_stmt
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95
    ')'    shift, and go to state 162


state 123

   41 nondecl_statement: '{' program '}' .

    $default  reduce using rule 41 (nondecl_statement)


state 124

   93 primary_expr: '(' expr ')' .

    $default  reduce using rule 93 (primary_expr)


state 125

  106 array_literal: '[' array_init_list ']' .

    $default  reduce using rule 106 (array_literal)


state 126

  109 array_init_list: array_init_list ',' . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 163
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 127

   72 expr: expr PLUS term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 72 (expr)


state 128

   84 term: postfix_expr .
   86 postfix_expr: postfix_expr . INC_OP
   87             | postfix_expr . DEC_OP

    INC_OP  shift, and go to state 99
    DEC_OP  shift, and go to state 100

    $default  reduce using rule 84 (term)


state 129

   73 expr: expr MINUS term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 73 (expr)


state 130

   64 expr: expr EQ term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 64 (expr)


state 131

   65 expr: expr NEQ term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 65 (expr)


state 132

   68 expr: expr GE term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 68 (expr)


state 133

   69 expr: expr LE term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 69 (expr)


state 134

   66 expr: expr GT term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 66 (expr)


state 135

   67 expr: expr LT term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 67 (expr)


state 136

   70 expr: expr OR term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 70 (expr)


state 137

   71 expr: expr AND term .
   81 term: term . MUL postfix_expr
   82     | term . DIV postfix_expr
   83     | term . MOD postfix_expr

    MUL  shift, and go to state 96
    DIV  shift, and go to state 97
    MOD  shift, and go to state 98

    $default  reduce using rule 71 (expr)


state 138

   81 term: term MUL postfix_expr .
   86 postfix_expr: postfix_expr . INC_OP
   87             | postfix_expr . DEC_OP

    INC_OP  shift, and go to state 99
    DEC_OP  shift, and go to state 100

    $default  reduce using rule 81 (term)


state 139

   82 term: term DIV postfix_expr .
   86 postfix_expr: postfix_expr . INC_OP
   87             | postfix_expr . DEC_OP

    INC_OP  shift, and go to state 99
    DEC_OP  shift, and go to state 100

    $default  reduce using rule 82 (term)


state 140

   83 term: term MOD postfix_expr .
   86 postfix_expr: postfix_expr . INC_OP
   87             | postfix_expr . DEC_OP

    INC_OP  shift, and go to state 99
    DEC_OP  shift, and go to state 100

    $default  reduce using rule 83 (term)


state 141

   30 decl_statement: type_decl IDENTIFIER ASSIGN postfix_expr . SEMICOLON
   86 postfix_expr: postfix_expr . INC_OP
   87             | postfix_expr . DEC_OP

    SEMICOLON  shift, and go to state 164
    INC_OP     shift, and go to state 99
    DEC_OP     shift, and go to state 100


state 142

   32 decl_statement: type_decl IDENTIFIER '[' ']' . ASSIGN array_literal SEMICOLON

    ASSIGN  shift, and go to state 165


state 143

   31 decl_statement: type_decl IDENTIFIER '[' expr . ']' SEMICOLON
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95
    ']'    shift, and go to state 166


state 144

   62 paramlist_nonempty: type_decl IDENTIFIER .

    $default  reduce using rule 62 (paramlist_nonempty)


state 145

    8 funcdef: typelist IDENTIFIER '(' paramlist ')' . '{' block '}'

    '{'  shift, and go to state 167


state 146

   63 paramlist_nonempty: paramlist_nonempty ',' . type_decl IDENTIFIER

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    CONST   shift, and go to state 17

    type_decl  go to state 168
    type       go to state 20


state 147

    9 funcdef: type IDENTIFIER '(' paramlist ')' . '{' block '}'

    '{'  shift, and go to state 169


state 148

   33 nondecl_statement: IDENTIFIER ASSIGN expr SEMICOLON .

    $default  reduce using rule 33 (nondecl_statement)


state 149

  101 primary_expr: IDENTIFIER '(' arglist ')' .

    $default  reduce using rule 101 (primary_expr)


state 150

  105 arglist: arglist ',' . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 170
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 151

   34 nondecl_statement: IDENTIFIER '[' expr ']' . ASSIGN expr SEMICOLON
   91 primary_expr: IDENTIFIER '[' expr ']' .

    ASSIGN  shift, and go to state 171

    $default  reduce using rule 91 (primary_expr)


state 152

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
   91 primary_expr: IDENTIFIER '[' expr . ']'

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95
    ']'    shift, and go to state 172


state 153

   54 init_statement: IDENTIFIER ASSIGN . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 173
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 154

   76 compound_assign: IDENTIFIER ADD_ASSIGN . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 174
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 155

   77 compound_assign: IDENTIFIER SUB_ASSIGN . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 175
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 156

   78 compound_assign: IDENTIFIER MUL_ASSIGN . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 176
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 157

   79 compound_assign: IDENTIFIER DIV_ASSIGN . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 177
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 158

   80 compound_assign: IDENTIFIER MOD_ASSIGN . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 178
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 159

   53 init_statement: type_decl IDENTIFIER . ASSIGN expr

    ASSIGN  shift, and go to state 179


state 160

   39 nondecl_statement: FOR '(' init_statement SEMICOLON . opt_expr SEMICOLON opt_update ')' '{' program '}'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 180
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    $default  reduce using rule 59 (opt_expr)

    type             go to state 65
    opt_expr         go to state 181
    expr             go to state 182
    compound_assign  go to state 183
    term             go to state 52
    postfix_expr     go to state 53
    primary_expr     go to state 54
    array_literal    go to state 55


state 161

   40 nondecl_statement: WHILE '(' expr ')' . '{' program '}'

    '{'  shift, and go to state 184


state 162

   44 if_stmt: IF '(' expr ')' . statement
   45        | IF '(' expr ')' . '{' program '}'
   46        | IF '(' expr ')' . statement ELSE statement
   47        | IF '(' expr ')' . statement ELSE if_stmt
   48        | IF '(' expr ')' . '{' program '}' ELSE statement
   49        | IF '(' expr ')' . '{' program '}' ELSE '{' program '}'
   50        | IF '(' expr ')' . '{' program '}' ELSE if_stmt

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 28
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    CONST           shift, and go to state 17
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    PRINT           shift, and go to state 34
    RETURN          shift, and go to state 35
    FOR             shift, and go to state 36
    WHILE           shift, and go to state 37
    BREAK           shift, and go to state 38
    IF              shift, and go to state 39
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '{'             shift, and go to state 185
    '('             shift, and go to state 44
    '['             shift, and go to state 45

    funcdef            go to state 186
    typelist           go to state 12
    type_decl          go to state 19
    type               go to state 187
    returnstmt         go to state 48
    statement          go to state 188
    decl_statement     go to state 189
    nondecl_statement  go to state 190
    if_stmt            go to state 50
    expr               go to state 51
    term               go to state 52
    postfix_expr       go to state 53
    primary_expr       go to state 54
    array_literal      go to state 55


state 163

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
  109 array_init_list: array_init_list ',' expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 109 (array_init_list)


state 164

   30 decl_statement: type_decl IDENTIFIER ASSIGN postfix_expr SEMICOLON .

    $default  reduce using rule 30 (decl_statement)


state 165

   32 decl_statement: type_decl IDENTIFIER '[' ']' ASSIGN . array_literal SEMICOLON

    '['  shift, and go to state 45

    array_literal  go to state 191


state 166

   31 decl_statement: type_decl IDENTIFIER '[' expr ']' . SEMICOLON

    SEMICOLON  shift, and go to state 192


state 167

    8 funcdef: typelist IDENTIFIER '(' paramlist ')' '{' . block '}'

    $default  reduce using rule 3 (decls)

    decls  go to state 193
    block  go to state 194


state 168

   63 paramlist_nonempty: paramlist_nonempty ',' type_decl . IDENTIFIER

    IDENTIFIER  shift, and go to state 195


state 169

    9 funcdef: type IDENTIFIER '(' paramlist ')' '{' . block '}'

    $default  reduce using rule 3 (decls)

    decls  go to state 193
    block  go to state 196


state 170

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
  105 arglist: arglist ',' expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 105 (arglist)


state 171

   34 nondecl_statement: IDENTIFIER '[' expr ']' ASSIGN . expr SEMICOLON

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 197
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 172

   91 primary_expr: IDENTIFIER '[' expr ']' .

    $default  reduce using rule 91 (primary_expr)


state 173

   54 init_statement: IDENTIFIER ASSIGN expr .
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 54 (init_statement)


state 174

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
   76 compound_assign: IDENTIFIER ADD_ASSIGN expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 76 (compound_assign)


state 175

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
   77 compound_assign: IDENTIFIER SUB_ASSIGN expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 77 (compound_assign)


state 176

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
   78 compound_assign: IDENTIFIER MUL_ASSIGN expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 78 (compound_assign)


state 177

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
   79 compound_assign: IDENTIFIER DIV_ASSIGN expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 79 (compound_assign)


state 178

   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term
   80 compound_assign: IDENTIFIER MOD_ASSIGN expr .

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 80 (compound_assign)


state 179

   53 init_statement: type_decl IDENTIFIER ASSIGN . expr

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    type           go to state 65
    expr           go to state 198
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 180

   76 compound_assign: IDENTIFIER . ADD_ASSIGN expr
   77                | IDENTIFIER . SUB_ASSIGN expr
   78                | IDENTIFIER . MUL_ASSIGN expr
   79                | IDENTIFIER . DIV_ASSIGN expr
   80                | IDENTIFIER . MOD_ASSIGN expr
   91 primary_expr: IDENTIFIER . '[' expr ']'
  101             | IDENTIFIER . '(' arglist ')'
  102             | IDENTIFIER . '(' ')'
  103             | IDENTIFIER .

    ADD_ASSIGN  shift, and go to state 154
    SUB_ASSIGN  shift, and go to state 155
    MUL_ASSIGN  shift, and go to state 156
    DIV_ASSIGN  shift, and go to state 157
    MOD_ASSIGN  shift, and go to state 158
    '('         shift, and go to state 61
    '['         shift, and go to state 113

    $default  reduce using rule 103 (primary_expr)


state 181

   39 nondecl_statement: FOR '(' init_statement SEMICOLON opt_expr . SEMICOLON opt_update ')' '{' program '}'

    SEMICOLON  shift, and go to state 199


state 182

   57 opt_expr: expr .
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 57 (opt_expr)


state 183

   58 opt_expr: compound_assign .

    $default  reduce using rule 58 (opt_expr)


state 184

   40 nondecl_statement: WHILE '(' expr ')' '{' . program '}'

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    '('     shift, and go to state 8

    STRING    [reduce using rule 3 (decls)]
    VOID      [reduce using rule 3 (decls)]
    TINY      [reduce using rule 3 (decls)]
    SHORT     [reduce using rule 3 (decls)]
    INT       [reduce using rule 3 (decls)]
    LONG      [reduce using rule 3 (decls)]
    BOOL      [reduce using rule 3 (decls)]
    '('       [reduce using rule 3 (decls)]
    $default  reduce using rule 3 (decls)

    program   go to state 200
    decls     go to state 10
    funcdef   go to state 11
    typelist  go to state 12
    type      go to state 13


state 185

   41 nondecl_statement: '{' . program '}'
   45 if_stmt: IF '(' expr ')' '{' . program '}'
   48        | IF '(' expr ')' '{' . program '}' ELSE statement
   49        | IF '(' expr ')' '{' . program '}' ELSE '{' program '}'
   50        | IF '(' expr ')' '{' . program '}' ELSE if_stmt

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    '('     shift, and go to state 8

    STRING    [reduce using rule 3 (decls)]
    VOID      [reduce using rule 3 (decls)]
    TINY      [reduce using rule 3 (decls)]
    SHORT     [reduce using rule 3 (decls)]
    INT       [reduce using rule 3 (decls)]
    LONG      [reduce using rule 3 (decls)]
    BOOL      [reduce using rule 3 (decls)]
    '('       [reduce using rule 3 (decls)]
    $default  reduce using rule 3 (decls)

    program   go to state 201
    decls     go to state 10
    funcdef   go to state 11
    typelist  go to state 12
    type      go to state 13


state 186

   28 statement: funcdef .

    $default  reduce using rule 28 (statement)


state 187

    9 funcdef: type . IDENTIFIER '(' paramlist ')' '{' block '}'
   12 typelist: type .
   13 type_decl: type .
   94 primary_expr: type . NUMBER

    NUMBER      shift, and go to state 84
    IDENTIFIER  shift, and go to state 23

    IDENTIFIER  [reduce using rule 12 (typelist)]
    IDENTIFIER  [reduce using rule 13 (type_decl)]


state 188

   44 if_stmt: IF '(' expr ')' statement .
   46        | IF '(' expr ')' statement . ELSE statement
   47        | IF '(' expr ')' statement . ELSE if_stmt

    ELSE  shift, and go to state 202

    ELSE      [reduce using rule 44 (if_stmt)]
    $default  reduce using rule 44 (if_stmt)


state 189

   26 statement: decl_statement .

    $default  reduce using rule 26 (statement)


state 190

   27 statement: nondecl_statement .

    $default  reduce using rule 27 (statement)


state 191

   32 decl_statement: type_decl IDENTIFIER '[' ']' ASSIGN array_literal . SEMICOLON

    SEMICOLON  shift, and go to state 203


state 192

   31 decl_statement: type_decl IDENTIFIER '[' expr ']' SEMICOLON .

    $default  reduce using rule 31 (decl_statement)


state 193

    4 decls: decls . decl_statement
   10 block: decls . stmts

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    CONST   shift, and go to state 17

    STRING    [reduce using rule 5 (stmts)]
    VOID      [reduce using rule 5 (stmts)]
    TINY      [reduce using rule 5 (stmts)]
    SHORT     [reduce using rule 5 (stmts)]
    INT       [reduce using rule 5 (stmts)]
    LONG      [reduce using rule 5 (stmts)]
    BOOL      [reduce using rule 5 (stmts)]
    $default  reduce using rule 5 (stmts)

    stmts           go to state 204
    type_decl       go to state 19
    type            go to state 20
    decl_statement  go to state 21


state 194

    8 funcdef: typelist IDENTIFIER '(' paramlist ')' '{' block . '}'

    '}'  shift, and go to state 205


state 195

   63 paramlist_nonempty: paramlist_nonempty ',' type_decl IDENTIFIER .

    $default  reduce using rule 63 (paramlist_nonempty)


state 196

    9 funcdef: type IDENTIFIER '(' paramlist ')' '{' block . '}'

    '}'  shift, and go to state 206


state 197

   34 nondecl_statement: IDENTIFIER '[' expr ']' ASSIGN expr . SEMICOLON
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS       shift, and go to state 85
    MINUS      shift, and go to state 86
    SEMICOLON  shift, and go to state 207
    EQ         shift, and go to state 88
    NEQ        shift, and go to state 89
    GE         shift, and go to state 90
    LE         shift, and go to state 91
    GT         shift, and go to state 92
    LT         shift, and go to state 93
    OR         shift, and go to state 94
    AND        shift, and go to state 95


state 198

   53 init_statement: type_decl IDENTIFIER ASSIGN expr .
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 53 (init_statement)


state 199

   39 nondecl_statement: FOR '(' init_statement SEMICOLON opt_expr SEMICOLON . opt_update ')' '{' program '}'

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 63
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '('             shift, and go to state 64
    '['             shift, and go to state 45

    $default  reduce using rule 52 (opt_update)

    type           go to state 65
    opt_update     go to state 208
    expr           go to state 209
    term           go to state 52
    postfix_expr   go to state 53
    primary_expr   go to state 54
    array_literal  go to state 55


state 200

   40 nondecl_statement: WHILE '(' expr ')' '{' program . '}'

    '}'  shift, and go to state 210


state 201

   41 nondecl_statement: '{' program . '}'
   45 if_stmt: IF '(' expr ')' '{' program . '}'
   48        | IF '(' expr ')' '{' program . '}' ELSE statement
   49        | IF '(' expr ')' '{' program . '}' ELSE '{' program '}'
   50        | IF '(' expr ')' '{' program . '}' ELSE if_stmt

    '}'  shift, and go to state 211


state 202

   46 if_stmt: IF '(' expr ')' statement ELSE . statement
   47        | IF '(' expr ')' statement ELSE . if_stmt

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 28
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    CONST           shift, and go to state 17
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    PRINT           shift, and go to state 34
    RETURN          shift, and go to state 35
    FOR             shift, and go to state 36
    WHILE           shift, and go to state 37
    BREAK           shift, and go to state 38
    IF              shift, and go to state 39
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '{'             shift, and go to state 43
    '('             shift, and go to state 44
    '['             shift, and go to state 45

    funcdef            go to state 186
    typelist           go to state 12
    type_decl          go to state 19
    type               go to state 187
    returnstmt         go to state 48
    statement          go to state 212
    decl_statement     go to state 189
    nondecl_statement  go to state 190
    if_stmt            go to state 213
    expr               go to state 51
    term               go to state 52
    postfix_expr       go to state 53
    primary_expr       go to state 54
    array_literal      go to state 55


state 203

   32 decl_statement: type_decl IDENTIFIER '[' ']' ASSIGN array_literal SEMICOLON .

    $default  reduce using rule 32 (decl_statement)


state 204

    6 stmts: stmts . nondecl_statement
    7      | stmts . funcdef
   10 block: decls stmts .

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 28
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    PRINT           shift, and go to state 34
    RETURN          shift, and go to state 35
    FOR             shift, and go to state 36
    WHILE           shift, and go to state 37
    BREAK           shift, and go to state 38
    IF              shift, and go to state 39
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '{'             shift, and go to state 43
    '('             shift, and go to state 44
    '['             shift, and go to state 45

    $default  reduce using rule 10 (block)

    funcdef            go to state 46
    typelist           go to state 12
    type               go to state 47
    returnstmt         go to state 48
    nondecl_statement  go to state 49
    if_stmt            go to state 50
    expr               go to state 51
    term               go to state 52
    postfix_expr       go to state 53
    primary_expr       go to state 54
    array_literal      go to state 55


state 205

    8 funcdef: typelist IDENTIFIER '(' paramlist ')' '{' block '}' .

    $default  reduce using rule 8 (funcdef)


state 206

    9 funcdef: type IDENTIFIER '(' paramlist ')' '{' block '}' .

    $default  reduce using rule 9 (funcdef)


state 207

   34 nondecl_statement: IDENTIFIER '[' expr ']' ASSIGN expr SEMICOLON .

    $default  reduce using rule 34 (nondecl_statement)


state 208

   39 nondecl_statement: FOR '(' init_statement SEMICOLON opt_expr SEMICOLON opt_update . ')' '{' program '}'

    ')'  shift, and go to state 214


state 209

   51 opt_update: expr .
   64 expr: expr . EQ term
   65     | expr . NEQ term
   66     | expr . GT term
   67     | expr . LT term
   68     | expr . GE term
   69     | expr . LE term
   70     | expr . OR term
   71     | expr . AND term
   72     | expr . PLUS term
   73     | expr . MINUS term

    PLUS   shift, and go to state 85
    MINUS  shift, and go to state 86
    EQ     shift, and go to state 88
    NEQ    shift, and go to state 89
    GE     shift, and go to state 90
    LE     shift, and go to state 91
    GT     shift, and go to state 92
    LT     shift, and go to state 93
    OR     shift, and go to state 94
    AND    shift, and go to state 95

    $default  reduce using rule 51 (opt_update)


state 210

   40 nondecl_statement: WHILE '(' expr ')' '{' program '}' .

    $default  reduce using rule 40 (nondecl_statement)


state 211

   41 nondecl_statement: '{' program '}' .
   45 if_stmt: IF '(' expr ')' '{' program '}' .
   48        | IF '(' expr ')' '{' program '}' . ELSE statement
   49        | IF '(' expr ')' '{' program '}' . ELSE '{' program '}'
   50        | IF '(' expr ')' '{' program '}' . ELSE if_stmt

    ELSE  shift, and go to state 215

    $end            reduce using rule 41 (nondecl_statement)
    $end            [reduce using rule 45 (if_stmt)]
    NUMBER          reduce using rule 41 (nondecl_statement)
    NUMBER          [reduce using rule 45 (if_stmt)]
    IDENTIFIER      reduce using rule 41 (nondecl_statement)
    IDENTIFIER      [reduce using rule 45 (if_stmt)]
    STRING          reduce using rule 41 (nondecl_statement)
    STRING          [reduce using rule 45 (if_stmt)]
    STRING_LITERAL  reduce using rule 41 (nondecl_statement)
    STRING_LITERAL  [reduce using rule 45 (if_stmt)]
    VOID            reduce using rule 41 (nondecl_statement)
    VOID            [reduce using rule 45 (if_stmt)]
    TINY            reduce using rule 41 (nondecl_statement)
    TINY            [reduce using rule 45 (if_stmt)]
    SHORT           reduce using rule 41 (nondecl_statement)
    SHORT           [reduce using rule 45 (if_stmt)]
    INT             reduce using rule 41 (nondecl_statement)
    INT             [reduce using rule 45 (if_stmt)]
    LONG            reduce using rule 41 (nondecl_statement)
    LONG            [reduce using rule 45 (if_stmt)]
    BOOL            reduce using rule 41 (nondecl_statement)
    BOOL            [reduce using rule 45 (if_stmt)]
    TRUE            reduce using rule 41 (nondecl_statement)
    TRUE            [reduce using rule 45 (if_stmt)]
    FALSE           reduce using rule 41 (nondecl_statement)
    FALSE           [reduce using rule 45 (if_stmt)]
    NULL_LIT        reduce using rule 41 (nondecl_statement)
    NULL_LIT        [reduce using rule 45 (if_stmt)]
    MINUS           reduce using rule 41 (nondecl_statement)
    MINUS           [reduce using rule 45 (if_stmt)]
    PRINT           reduce using rule 41 (nondecl_statement)
    PRINT           [reduce using rule 45 (if_stmt)]
    RETURN          reduce using rule 41 (nondecl_statement)
    RETURN          [reduce using rule 45 (if_stmt)]
    FOR             reduce using rule 41 (nondecl_statement)
    FOR             [reduce using rule 45 (if_stmt)]
    WHILE           reduce using rule 41 (nondecl_statement)
    WHILE           [reduce using rule 45 (if_stmt)]
    BREAK           reduce using rule 41 (nondecl_statement)
    BREAK           [reduce using rule 45 (if_stmt)]
    IF              reduce using rule 41 (nondecl_statement)
    IF              [reduce using rule 45 (if_stmt)]
    ELSE            [reduce using rule 41 (nondecl_statement)]
    ELSE            [reduce using rule 45 (if_stmt)]
    NOT             reduce using rule 41 (nondecl_statement)
    NOT             [reduce using rule 45 (if_stmt)]
    INC_OP          reduce using rule 41 (nondecl_statement)
    INC_OP          [reduce using rule 45 (if_stmt)]
    DEC_OP          reduce using rule 41 (nondecl_statement)
    DEC_OP          [reduce using rule 45 (if_stmt)]
    '{'             reduce using rule 41 (nondecl_statement)
    '{'             [reduce using rule 45 (if_stmt)]
    '}'             reduce using rule 41 (nondecl_statement)
    '}'             [reduce using rule 45 (if_stmt)]
    '('             reduce using rule 41 (nondecl_statement)
    '('             [reduce using rule 45 (if_stmt)]
    '['             reduce using rule 41 (nondecl_statement)
    '['             [reduce using rule 45 (if_stmt)]
    $default        reduce using rule 41 (nondecl_statement)


state 212

   46 if_stmt: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 46 (if_stmt)


state 213

   42 nondecl_statement: if_stmt .
   47 if_stmt: IF '(' expr ')' statement ELSE if_stmt .

    $end            reduce using rule 42 (nondecl_statement)
    $end            [reduce using rule 47 (if_stmt)]
    NUMBER          reduce using rule 42 (nondecl_statement)
    NUMBER          [reduce using rule 47 (if_stmt)]
    IDENTIFIER      reduce using rule 42 (nondecl_statement)
    IDENTIFIER      [reduce using rule 47 (if_stmt)]
    STRING          reduce using rule 42 (nondecl_statement)
    STRING          [reduce using rule 47 (if_stmt)]
    STRING_LITERAL  reduce using rule 42 (nondecl_statement)
    STRING_LITERAL  [reduce using rule 47 (if_stmt)]
    VOID            reduce using rule 42 (nondecl_statement)
    VOID            [reduce using rule 47 (if_stmt)]
    TINY            reduce using rule 42 (nondecl_statement)
    TINY            [reduce using rule 47 (if_stmt)]
    SHORT           reduce using rule 42 (nondecl_statement)
    SHORT           [reduce using rule 47 (if_stmt)]
    INT             reduce using rule 42 (nondecl_statement)
    INT             [reduce using rule 47 (if_stmt)]
    LONG            reduce using rule 42 (nondecl_statement)
    LONG            [reduce using rule 47 (if_stmt)]
    BOOL            reduce using rule 42 (nondecl_statement)
    BOOL            [reduce using rule 47 (if_stmt)]
    TRUE            reduce using rule 42 (nondecl_statement)
    TRUE            [reduce using rule 47 (if_stmt)]
    FALSE           reduce using rule 42 (nondecl_statement)
    FALSE           [reduce using rule 47 (if_stmt)]
    NULL_LIT        reduce using rule 42 (nondecl_statement)
    NULL_LIT        [reduce using rule 47 (if_stmt)]
    MINUS           reduce using rule 42 (nondecl_statement)
    MINUS           [reduce using rule 47 (if_stmt)]
    PRINT           reduce using rule 42 (nondecl_statement)
    PRINT           [reduce using rule 47 (if_stmt)]
    RETURN          reduce using rule 42 (nondecl_statement)
    RETURN          [reduce using rule 47 (if_stmt)]
    FOR             reduce using rule 42 (nondecl_statement)
    FOR             [reduce using rule 47 (if_stmt)]
    WHILE           reduce using rule 42 (nondecl_statement)
    WHILE           [reduce using rule 47 (if_stmt)]
    BREAK           reduce using rule 42 (nondecl_statement)
    BREAK           [reduce using rule 47 (if_stmt)]
    IF              reduce using rule 42 (nondecl_statement)
    IF              [reduce using rule 47 (if_stmt)]
    ELSE            reduce using rule 42 (nondecl_statement)
    ELSE            [reduce using rule 47 (if_stmt)]
    NOT             reduce using rule 42 (nondecl_statement)
    NOT             [reduce using rule 47 (if_stmt)]
    INC_OP          reduce using rule 42 (nondecl_statement)
    INC_OP          [reduce using rule 47 (if_stmt)]
    DEC_OP          reduce using rule 42 (nondecl_statement)
    DEC_OP          [reduce using rule 47 (if_stmt)]
    '{'             reduce using rule 42 (nondecl_statement)
    '{'             [reduce using rule 47 (if_stmt)]
    '}'             reduce using rule 42 (nondecl_statement)
    '}'             [reduce using rule 47 (if_stmt)]
    '('             reduce using rule 42 (nondecl_statement)
    '('             [reduce using rule 47 (if_stmt)]
    '['             reduce using rule 42 (nondecl_statement)
    '['             [reduce using rule 47 (if_stmt)]
    $default        reduce using rule 42 (nondecl_statement)


state 214

   39 nondecl_statement: FOR '(' init_statement SEMICOLON opt_expr SEMICOLON opt_update ')' . '{' program '}'

    '{'  shift, and go to state 216


state 215

   48 if_stmt: IF '(' expr ')' '{' program '}' ELSE . statement
   49        | IF '(' expr ')' '{' program '}' ELSE . '{' program '}'
   50        | IF '(' expr ')' '{' program '}' ELSE . if_stmt

    NUMBER          shift, and go to state 27
    IDENTIFIER      shift, and go to state 28
    STRING          shift, and go to state 1
    STRING_LITERAL  shift, and go to state 29
    VOID            shift, and go to state 2
    TINY            shift, and go to state 3
    SHORT           shift, and go to state 4
    INT             shift, and go to state 5
    LONG            shift, and go to state 6
    BOOL            shift, and go to state 7
    CONST           shift, and go to state 17
    TRUE            shift, and go to state 30
    FALSE           shift, and go to state 31
    NULL_LIT        shift, and go to state 32
    MINUS           shift, and go to state 33
    PRINT           shift, and go to state 34
    RETURN          shift, and go to state 35
    FOR             shift, and go to state 36
    WHILE           shift, and go to state 37
    BREAK           shift, and go to state 38
    IF              shift, and go to state 39
    NOT             shift, and go to state 40
    INC_OP          shift, and go to state 41
    DEC_OP          shift, and go to state 42
    '{'             shift, and go to state 217
    '('             shift, and go to state 44
    '['             shift, and go to state 45

    funcdef            go to state 186
    typelist           go to state 12
    type_decl          go to state 19
    type               go to state 187
    returnstmt         go to state 48
    statement          go to state 218
    decl_statement     go to state 189
    nondecl_statement  go to state 190
    if_stmt            go to state 219
    expr               go to state 51
    term               go to state 52
    postfix_expr       go to state 53
    primary_expr       go to state 54
    array_literal      go to state 55


state 216

   39 nondecl_statement: FOR '(' init_statement SEMICOLON opt_expr SEMICOLON opt_update ')' '{' . program '}'

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    '('     shift, and go to state 8

    STRING    [reduce using rule 3 (decls)]
    VOID      [reduce using rule 3 (decls)]
    TINY      [reduce using rule 3 (decls)]
    SHORT     [reduce using rule 3 (decls)]
    INT       [reduce using rule 3 (decls)]
    LONG      [reduce using rule 3 (decls)]
    BOOL      [reduce using rule 3 (decls)]
    '('       [reduce using rule 3 (decls)]
    $default  reduce using rule 3 (decls)

    program   go to state 220
    decls     go to state 10
    funcdef   go to state 11
    typelist  go to state 12
    type      go to state 13


state 217

   41 nondecl_statement: '{' . program '}'
   49 if_stmt: IF '(' expr ')' '{' program '}' ELSE '{' . program '}'

    STRING  shift, and go to state 1
    VOID    shift, and go to state 2
    TINY    shift, and go to state 3
    SHORT   shift, and go to state 4
    INT     shift, and go to state 5
    LONG    shift, and go to state 6
    BOOL    shift, and go to state 7
    '('     shift, and go to state 8

    STRING    [reduce using rule 3 (decls)]
    VOID      [reduce using rule 3 (decls)]
    TINY      [reduce using rule 3 (decls)]
    SHORT     [reduce using rule 3 (decls)]
    INT       [reduce using rule 3 (decls)]
    LONG      [reduce using rule 3 (decls)]
    BOOL      [reduce using rule 3 (decls)]
    '('       [reduce using rule 3 (decls)]
    $default  reduce using rule 3 (decls)

    program   go to state 221
    decls     go to state 10
    funcdef   go to state 11
    typelist  go to state 12
    type      go to state 13


state 218

   48 if_stmt: IF '(' expr ')' '{' program '}' ELSE statement .

    $default  reduce using rule 48 (if_stmt)


state 219

   42 nondecl_statement: if_stmt .
   50 if_stmt: IF '(' expr ')' '{' program '}' ELSE if_stmt .

    $end            reduce using rule 42 (nondecl_statement)
    $end            [reduce using rule 50 (if_stmt)]
    NUMBER          reduce using rule 42 (nondecl_statement)
    NUMBER          [reduce using rule 50 (if_stmt)]
    IDENTIFIER      reduce using rule 42 (nondecl_statement)
    IDENTIFIER      [reduce using rule 50 (if_stmt)]
    STRING          reduce using rule 42 (nondecl_statement)
    STRING          [reduce using rule 50 (if_stmt)]
    STRING_LITERAL  reduce using rule 42 (nondecl_statement)
    STRING_LITERAL  [reduce using rule 50 (if_stmt)]
    VOID            reduce using rule 42 (nondecl_statement)
    VOID            [reduce using rule 50 (if_stmt)]
    TINY            reduce using rule 42 (nondecl_statement)
    TINY            [reduce using rule 50 (if_stmt)]
    SHORT           reduce using rule 42 (nondecl_statement)
    SHORT           [reduce using rule 50 (if_stmt)]
    INT             reduce using rule 42 (nondecl_statement)
    INT             [reduce using rule 50 (if_stmt)]
    LONG            reduce using rule 42 (nondecl_statement)
    LONG            [reduce using rule 50 (if_stmt)]
    BOOL            reduce using rule 42 (nondecl_statement)
    BOOL            [reduce using rule 50 (if_stmt)]
    TRUE            reduce using rule 42 (nondecl_statement)
    TRUE            [reduce using rule 50 (if_stmt)]
    FALSE           reduce using rule 42 (nondecl_statement)
    FALSE           [reduce using rule 50 (if_stmt)]
    NULL_LIT        reduce using rule 42 (nondecl_statement)
    NULL_LIT        [reduce using rule 50 (if_stmt)]
    MINUS           reduce using rule 42 (nondecl_statement)
    MINUS           [reduce using rule 50 (if_stmt)]
    PRINT           reduce using rule 42 (nondecl_statement)
    PRINT           [reduce using rule 50 (if_stmt)]
    RETURN          reduce using rule 42 (nondecl_statement)
    RETURN          [reduce using rule 50 (if_stmt)]
    FOR             reduce using rule 42 (nondecl_statement)
    FOR             [reduce using rule 50 (if_stmt)]
    WHILE           reduce using rule 42 (nondecl_statement)
    WHILE           [reduce using rule 50 (if_stmt)]
    BREAK           reduce using rule 42 (nondecl_statement)
    BREAK           [reduce using rule 50 (if_stmt)]
    IF              reduce using rule 42 (nondecl_statement)
    IF              [reduce using rule 50 (if_stmt)]
    ELSE            reduce using rule 42 (nondecl_statement)
    ELSE            [reduce using rule 50 (if_stmt)]
    NOT             reduce using rule 42 (nondecl_statement)
    NOT             [reduce using rule 50 (if_stmt)]
    INC_OP          reduce using rule 42 (nondecl_statement)
    INC_OP          [reduce using rule 50 (if_stmt)]
    DEC_OP          reduce using rule 42 (nondecl_statement)
    DEC_OP          [reduce using rule 50 (if_stmt)]
    '{'             reduce using rule 42 (nondecl_statement)
    '{'             [reduce using rule 50 (if_stmt)]
    '}'             reduce using rule 42 (nondecl_statement)
    '}'             [reduce using rule 50 (if_stmt)]
    '('             reduce using rule 42 (nondecl_statement)
    '('             [reduce using rule 50 (if_stmt)]
    '['             reduce using rule 42 (nondecl_statement)
    '['             [reduce using rule 50 (if_stmt)]
    $default        reduce using rule 42 (nondecl_statement)


state 220

   39 nondecl_statement: FOR '(' init_statement SEMICOLON opt_expr SEMICOLON opt_update ')' '{' program . '}'

    '}'  shift, and go to state 222


state 221

   41 nondecl_statement: '{' program . '}'
   49 if_stmt: IF '(' expr ')' '{' program '}' ELSE '{' program . '}'

    '}'  shift, and go to state 223


state 222

   39 nondecl_statement: FOR '(' init_statement SEMICOLON opt_expr SEMICOLON opt_update ')' '{' program '}' .

    $default  reduce using rule 39 (nondecl_statement)


state 223

   41 nondecl_statement: '{' program '}' .
   49 if_stmt: IF '(' expr ')' '{' program '}' ELSE '{' program '}' .

    $end            reduce using rule 41 (nondecl_statement)
    $end            [reduce using rule 49 (if_stmt)]
    NUMBER          reduce using rule 41 (nondecl_statement)
    NUMBER          [reduce using rule 49 (if_stmt)]
    IDENTIFIER      reduce using rule 41 (nondecl_statement)
    IDENTIFIER      [reduce using rule 49 (if_stmt)]
    STRING          reduce using rule 41 (nondecl_statement)
    STRING          [reduce using rule 49 (if_stmt)]
    STRING_LITERAL  reduce using rule 41 (nondecl_statement)
    STRING_LITERAL  [reduce using rule 49 (if_stmt)]
    VOID            reduce using rule 41 (nondecl_statement)
    VOID            [reduce using rule 49 (if_stmt)]
    TINY            reduce using rule 41 (nondecl_statement)
    TINY            [reduce using rule 49 (if_stmt)]
    SHORT           reduce using rule 41 (nondecl_statement)
    SHORT           [reduce using rule 49 (if_stmt)]
    INT             reduce using rule 41 (nondecl_statement)
    INT             [reduce using rule 49 (if_stmt)]
    LONG            reduce using rule 41 (nondecl_statement)
    LONG            [reduce using rule 49 (if_stmt)]
    BOOL            reduce using rule 41 (nondecl_statement)
    BOOL            [reduce using rule 49 (if_stmt)]
    TRUE            reduce using rule 41 (nondecl_statement)
    TRUE            [reduce using rule 49 (if_stmt)]
    FALSE           reduce using rule 41 (nondecl_statement)
    FALSE           [reduce using rule 49 (if_stmt)]
    NULL_LIT        reduce using rule 41 (nondecl_statement)
    NULL_LIT        [reduce using rule 49 (if_stmt)]
    MINUS           reduce using rule 41 (nondecl_statement)
    MINUS           [reduce using rule 49 (if_stmt)]
    PRINT           reduce using rule 41 (nondecl_statement)
    PRINT           [reduce using rule 49 (if_stmt)]
    RETURN          reduce using rule 41 (nondecl_statement)
    RETURN          [reduce using rule 49 (if_stmt)]
    FOR             reduce using rule 41 (nondecl_statement)
    FOR             [reduce using rule 49 (if_stmt)]
    WHILE           reduce using rule 41 (nondecl_statement)
    WHILE           [reduce using rule 49 (if_stmt)]
    BREAK           reduce using rule 41 (nondecl_statement)
    BREAK           [reduce using rule 49 (if_stmt)]
    IF              reduce using rule 41 (nondecl_statement)
    IF              [reduce using rule 49 (if_stmt)]
    ELSE            reduce using rule 41 (nondecl_statement)
    ELSE            [reduce using rule 49 (if_stmt)]
    NOT             reduce using rule 41 (nondecl_statement)
    NOT             [reduce using rule 49 (if_stmt)]
    INC_OP          reduce using rule 41 (nondecl_statement)
    INC_OP          [reduce using rule 49 (if_stmt)]
    DEC_OP          reduce using rule 41 (nondecl_statement)
    DEC_OP          [reduce using rule 49 (if_stmt)]
    '{'             reduce using rule 41 (nondecl_statement)
    '{'             [reduce using rule 49 (if_stmt)]
    '}'             reduce using rule 41 (nondecl_statement)
    '}'             [reduce using rule 49 (if_stmt)]
    '('             reduce using rule 41 (nondecl_statement)
    '('             [reduce using rule 49 (if_stmt)]
    '['             reduce using rule 41 (nondecl_statement)
    '['             [reduce using rule 49 (if_stmt)]
    $default        reduce using rule 41 (nondecl_statement)
