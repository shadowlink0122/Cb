#ifndef DEBUG_H
#define DEBUG_H

// デバッグ言語設定
enum class DebugLanguage { ENGLISH, JAPANESE };

// デバッグメッセージID
enum class DebugMsgId {
    // ノード作成関連
    NODE_CREATE_STMTLIST,
    NODE_CREATE_TYPESPEC,
    NODE_CREATE_VAR_DECL,
    NODE_CREATE_ASSIGN,
    NODE_CREATE_ARRAY_DECL,
    NODE_CREATE_FUNC_DECL,

    // 関数定義関連
    FUNC_DECL_REGISTER,
    FUNC_DECL_REGISTER_COMPLETE,
    PARAM_LIST_START,
    PARAM_LIST_SIZE,
    PARAM_LIST_COMPLETE,
    PARAM_LIST_DELETE,
    PARAM_LIST_NONE,
    FUNC_BODY_START,
    FUNC_BODY_EXISTS,
    FUNC_BODY_SET_COMPLETE,
    FUNC_BODY_NONE,
    FUNC_DEF_COMPLETE,

    // インタープリター関連
    INTERPRETER_START,
    AST_IS_NULL,
    GLOBAL_DECL_START,
    GLOBAL_DECL_COMPLETE,
    MAIN_FUNC_SEARCH,
    MAIN_FUNC_FOUND,
    MAIN_FUNC_EXIT,

    // 式評価関連
    EXPR_EVAL_NUMBER,
    EXPR_EVAL_VAR_REF,
    VAR_VALUE,
    EXPR_EVAL_ARRAY_REF,
    ARRAY_INDEX,
    STRING_ELEMENT_ACCESS,
    STRING_LENGTH_UTF8,
    STRING_ELEMENT_VALUE,
    ARRAY_ELEMENT_ACCESS,
    ARRAY_ELEMENT_VALUE,
    EXPR_EVAL_BINARY_OP,
    BINARY_OP_VALUES,

    // メイン関数関連
    PARSING_START,
    AST_GENERATED,
    EXECUTION_COMPLETE,

    // 変数代入関連
    VAR_ASSIGN,
    VAR_CREATE_NEW,
    VAR_ASSIGN_READABLE,    // 人間が読みやすい形式
    STRING_ASSIGN_READABLE, // 文字列代入の読みやすい形式
    STRING_VAR_CREATE_NEW,  // 文字列変数作成
    VAR_DECLARATION_DEBUG,  // 変数宣言デバッグ

    // 配列初期化関連
    ARRAY_INIT_CALLED,
    ARRAY_INIT_WITH_TYPE_CALLED,
    ARRAY_LITERAL_CALLED,
    ARRAY_LITERAL_ASSIGN_DEBUG, // 配列リテラル代入デバッグ
    ARRAY_LITERAL_COMPLETED,
    ARRAY_INIT_COMPLETED,
    ARRAY_INIT_WITH_TYPE_COMPLETED,
    ARRAY_LITERAL_ELEMENTS,
    ARRAY_INIT_ELEMENTS,
    TYPE_MISMATCH_ARRAY_INIT,
    CURRENT_TYPE_SET,

    // エラーメッセージ
    PARSER_ERROR,
    TYPE_MISMATCH_ERROR,
    STRING_IN_INT_ARRAY_ERROR,

    // 型システム関連
    TYPEDEF_REGISTER,
    TYPEDEF_REGISTER_SUCCESS,
    TYPE_ALIAS_RESOLVE,
    TYPE_ALIAS_CREATE_NODE,
    TYPE_ALIAS_RUNTIME_RESOLVE,

    // インタープリターエラー関連
    VAR_REDECLARE_ERROR,
    NEGATIVE_ARRAY_SIZE_ERROR,
    DYNAMIC_ARRAY_NOT_SUPPORTED,
    MAIN_FUNC_NOT_FOUND_ERROR,
    UNDEFINED_VAR_ERROR,
    DIRECT_ARRAY_REF_ERROR,
    UNDEFINED_ARRAY_ERROR,
    STRING_OUT_OF_BOUNDS_ERROR,
    ARRAY_OUT_OF_BOUNDS_ERROR,
    NON_ARRAY_REF_ERROR,
    ZERO_DIVISION_ERROR,
    UNKNOWN_BINARY_OP_ERROR,
    UNKNOWN_UNARY_OP_ERROR,
    UNDEFINED_FUNC_ERROR,
    ARG_COUNT_MISMATCH_ERROR,
    ARRAY_DECL_AS_EXPR_ERROR,
    UNSUPPORTED_EXPR_NODE_ERROR,
    CONST_REASSIGN_ERROR,
    DIRECT_ARRAY_ASSIGN_ERROR,
    CONST_ARRAY_ASSIGN_ERROR,
    CONST_STRING_ELEMENT_ASSIGN_ERROR,
    TYPE_RANGE_ERROR,
    NON_STRING_CHAR_ASSIGN_ERROR,

    // デバッグ情報
    STRING_LITERAL_DEBUG,
    BINARY_OP_RESULT_DEBUG,
    UNARY_OP_DEBUG,
    UNARY_OP_OPERAND_DEBUG,
    UNARY_OP_RESULT_DEBUG,
    EXISTING_VAR_ASSIGN_DEBUG,
    EXISTING_STRING_VAR_ASSIGN_DEBUG,
    STRING_ELEMENT_ASSIGN_DEBUG,
    STRING_LENGTH_UTF8_DEBUG,
    STRING_ELEMENT_REPLACE_DEBUG,
    STRING_AFTER_REPLACE_DEBUG,
    ARRAY_DECL_EVAL_DEBUG,

    // 多次元配列関連
    ARRAY_DECL_DEBUG,
    ARRAY_DIMENSIONS_COUNT,
    MULTIDIM_ARRAY_PROCESSING,
    SINGLE_DIM_ARRAY_PROCESSING,
    MULTIDIM_ARRAY_ASSIGNMENT_DETECTED,
    MULTIDIM_ARRAY_ACCESS_INFO,
    FLAT_INDEX_CALCULATED,
    MULTIDIM_ARRAY_ASSIGNMENT_COMPLETED,
    ARRAY_ELEMENT_ASSIGN_DEBUG,
    VARIABLE_NOT_FOUND,
    ARRAY_INFO,
    ARRAY_INDEX_OUT_OF_BOUNDS,
    ARRAY_ELEMENT_ASSIGN_START,
    ARRAY_ELEMENT_ASSIGN_SUCCESS,

    // 配列宣言関連（追加）
    ARRAY_DECL_START,
    MULTIDIM_ARRAY_DECL_INFO,
    ARRAY_TOTAL_SIZE,
    MULTIDIM_ARRAY_DECL_SUCCESS,
    ARRAY_DECL_SUCCESS,

    // printf出力関連デバッグ
    PRINTF_OFFSET_CALLED,
    PRINTF_ARG_LIST_INFO,
    PRINTF_ARG_PROCESSING,
    PRINTF_ARRAY_REF_DEBUG,

    // 配列参照詳細デバッグ
    ARRAY_REF_EVAL_START,
    ARRAY_REF_NODE_POINTER,
    ARRAY_REF_LEFT_POINTER,
    ARRAY_REF_NAME_DEBUG,
    ARRAY_REF_INDEX_POINTER,

    // const変数再代入エラー
    CONST_VAR_REASSIGN_ERROR,
};

// デバッグモードフラグ（外部宣言）
extern bool debug_mode;
extern DebugLanguage debug_language;

// デバッグ出力関数（既存）
void debug_print(const char *fmt, ...);

// 多言語対応デバッグ出力関数（新規）
void debug_msg(DebugMsgId msg_id, ...);

// 多言語対応エラー出力関数（新規）
void error_msg(DebugMsgId msg_id, ...);

#endif // DEBUG_H
