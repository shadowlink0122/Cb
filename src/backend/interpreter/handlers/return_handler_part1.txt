#include "return_handler.h"
#include "../core/interpreter.h"
#include "../../../common/ast.h"
#include "../../../common/debug.h"
#include "../../../common/debug_messages.h"
#include "../evaluator/expression_evaluator.h"
#include "../core/type_inference.h"
#include <stdexcept>
#include <iostream>

// return文の実行
void ReturnHandler::execute_return_statement(const ASTNode *node) {
    debug_msg(DebugMsgId::INTERPRETER_RETURN_STMT);
    
    if (!node->left) {
        // return値なし
        throw ReturnException(static_cast<int64_t>(0), TYPE_INT);
        return;
    }
    
    debug_msg(DebugMsgId::INTERPRETER_RETURN_STMT);
    
    // 配列リテラルの直接返却をサポート
    if (node->left->node_type == ASTNodeType::AST_ARRAY_LITERAL) {
        handle_array_literal_return(node);
        return;
    }
    
    // 文字列リテラル
    if (node->left->node_type == ASTNodeType::AST_STRING_LITERAL) {
        throw ReturnException(node->left->str_value);
        return;
    }
    
    // 識別子（特に self）
    if (node->left->node_type == ASTNodeType::AST_IDENTIFIER) {
        handle_identifier_return(node);
        return;
    }
    
    // 変数
    if (node->left->node_type == ASTNodeType::AST_VARIABLE) {
        handle_variable_return(node);
        return;
    }
    
    // メンバーアクセス
    if (node->left->node_type == ASTNodeType::AST_MEMBER_ACCESS) {
        handle_member_access_return(node);
        return;
    }
    
    // デフォルトの式評価（型推論対応）
    handle_expression_return(node);
}
