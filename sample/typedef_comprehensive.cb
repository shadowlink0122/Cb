// Comprehensive Typedef Examples
// Cbプログラミング言語のtypedef機能デモンストレーション

// Basic typedef declarations
typedef int Age;
typedef string Name;
typedef int Score;
typedef int Temperature;
typedef string Unit;
typedef int Distance;
typedef int ProductId;
typedef string ProductName;
typedef int Quantity;
typedef int Price;

// Temperature conversion function
Temperature celsius_to_fahrenheit(Temperature celsius) {
    return (celsius * 9) / 5 + 32;
}

// Distance calculation function  
Distance calculate_distance(Distance x1, Distance y1, Distance x2, Distance y2) {
    Distance dx = x2 - x1;
    Distance dy = y2 - y1;
    // Simple distance approximation (Manhattan distance)
    Distance result = dx + dy;
    if (result < 0) {
        result = -result;
    }
    return result;
}

int main() {
    println("=== Cb Language Typedef Comprehensive Demo ===");
    println("");
    
    // ========== Section 1: Basic Typedef Usage ==========
    println("1. Basic Typedef Usage:");
    
    Name student_name = "田中太郎";
    Age student_age = 20;
    Score math_score = 95;
    Score english_score = 87;
    
    print("学生情報 - 名前: ");
    print(student_name);
    print(", 年齢: ");
    print(student_age);
    print("歳");
    println();
    
    Score total = math_score + english_score;
    Score average = total / 2;
    
    print("成績 - 数学: ");
    print(math_score);
    print("点, 英語: ");
    print(english_score);
    print("点, 平均: ");
    print(average);
    print("点");
    println();
    println("");
    
    // ========== Section 2: Function Parameters with Typedef ==========
    println("2. Function Parameters with Typedef:");
    
    Temperature temp_c = 25;
    Unit celsius_unit = "°C";
    Unit fahrenheit_unit = "°F";
    
    Temperature temp_f = celsius_to_fahrenheit(temp_c);
    
    print("温度変換: ");
    print(temp_c);
    print(celsius_unit);
    print(" = ");
    print(temp_f);
    print(fahrenheit_unit);
    println();
    
    Distance x1 = 10;
    Distance y1 = 20;  
    Distance x2 = 35;
    Distance y2 = 50;
    
    print("距離計算: 点1(");
    print(x1);
    print(", ");
    print(y1);
    print(") から 点2(");
    print(x2);
    print(", ");
    print(y2);
    print(") まで = ");
    
    Distance dist = calculate_distance(x1, y1, x2, y2);
    print(dist);
    print(" (マンハッタン距離)");
    println();
    println("");
    
    // ========== Section 3: Array-like Operations with Typedef ==========
    println("3. Array-like Operations with Typedef:");
    
    // Manual array simulation since ProductId[3] syntax is not supported yet
    ProductId id1 = 1001;
    ProductId id2 = 1002; 
    ProductId id3 = 1003;
    
    ProductName name1 = "ノートPC";
    ProductName name2 = "マウス";
    ProductName name3 = "キーボード";
    
    Quantity qty1 = 5;
    Quantity qty2 = 20;
    Quantity qty3 = 8;
    
    Price price1 = 80000;
    Price price2 = 2500;
    Price price3 = 5000;
    
    println("商品管理システム - 在庫一覧:");
    
    print("ID: ");
    print(id1);
    print(", 商品: ");
    print(name1);
    print(", 在庫: ");
    print(qty1);
    print(", 単価: ¥");
    print(price1);
    println();
    
    print("ID: ");
    print(id2);
    print(", 商品: ");
    print(name2);
    print(", 在庫: ");
    print(qty2);
    print(", 単価: ¥");
    print(price2);
    println();
    
    print("ID: ");
    print(id3);
    print(", 商品: ");
    print(name3);
    print(", 在庫: ");
    print(qty3);
    print(", 単価: ¥");
    print(price3);
    println();
    
    // Calculate total inventory value
    Price item1_total = qty1 * price1;
    Price item2_total = qty2 * price2;
    Price item3_total = qty3 * price3;
    Price total_value = item1_total + item2_total + item3_total;
    
    print("総在庫価値: ¥");
    print(total_value);
    println();
    println("");
    
    // ========== Section 4: Type Safety Demonstration ==========
    println("4. Type Safety Demonstration:");
    
    // All these are actually int, but typedef provides semantic meaning
    Age person_age = 25;
    Score test_score = 85;
    Temperature room_temp = 22;
    Distance travel_dist = 100;
    
    print("型安全性デモ - ");
    print("年齢: ");
    print(person_age);
    print(", テスト点数: ");
    print(test_score);
    print(", 室温: ");
    print(room_temp);
    print("度, 距離: ");
    print(travel_dist);
    print("km");
    println();
    
    // Type aliases make code more readable and self-documenting
    Age retirement_age = 65;
    Age years_to_retirement = retirement_age - person_age;
    
    print("退職まで: ");
    print(years_to_retirement);
    print("年");
    println();
    println("");
    
    // ========== Section 5: Complex Calculations with Typedef ==========
    println("5. Complex Calculations with Typedef:");
    
    // Payroll calculation using typedef
    typedef int HourlyRate;
    typedef int WorkHours;
    typedef int Salary;
    
    HourlyRate base_rate = 1500;
    WorkHours regular_hours = 40;
    WorkHours overtime_hours = 10;
    HourlyRate overtime_rate = base_rate + (base_rate / 2); // 1.5x rate
    
    Salary regular_pay = regular_hours * base_rate;
    Salary overtime_pay = overtime_hours * overtime_rate;
    Salary total_salary = regular_pay + overtime_pay;
    
    print("給与計算 - ");
    print("基本時給: ¥");
    print(base_rate);
    print(", 通常労働: ");
    print(regular_hours);
    print("時間");
    println();
    print("残業時給: ¥");
    print(overtime_rate);
    print(", 残業時間: ");
    print(overtime_hours);
    print("時間");
    println();
    print("総給与: ¥");
    print(total_salary);
    print(" (通常¥");
    print(regular_pay);
    print(" + 残業¥");
    print(overtime_pay);
    print(")");
    println();
    
    println("");
    println("=== Typedef Demo Complete ===");
    
    return 0;
}
