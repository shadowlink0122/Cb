// Comprehensive Typedef Examples
// Cbプログラミング言語のtypedef機能デモンストレーション

// Basic typedef declarations
typedef int Age;
typedef string Name;
typedef int Score;
typedef int Temperature;
typedef string Unit;
typedef int Distance;
typedef int ProductId;
typedef string ProductName;
typedef int Quantity;
typedef int Price;
typedef int HourlyRate;
typedef int WorkHours;
typedef int Salary;

// Temperature conversion function
Temperature celsius_to_fahrenheit(Temperature celsius) {
    return (celsius * 9) / 5 + 32;
}

// Distance calculation function  
Distance calculate_distance(Distance x1, Distance y1, Distance x2, Distance y2) {
    Distance dx = x2 - x1;
    Distance dy = y2 - y1;
    // Simple distance approximation (Manhattan distance)
    Distance result = dx + dy;
    if (result < 0) {
        result = -result;
    }
    return result;
}

int main() {
    println("=== Cb Language Typedef Comprehensive Demo ===");
    println();
    
    // ========== Section 1: Basic Typedef Usage ==========
    println("1. Basic Typedef Usage:");
    
    Name student_name = "田中太郎";
    Age student_age = 20;
    Score math_score = 95;
    Score english_score = 87;
    
    println("学生情報 - 名前: %s, 年齢: %d歳", student_name, student_age);
    
    Score total = math_score + english_score;
    Score average = total / 2;
    
    println("成績 - 数学: %d点, 英語: %d点, 平均: %d点", math_score, english_score, average);
    println();
    
    // ========== Section 2: Function Parameters with Typedef ==========
    println("2. Function Parameters with Typedef:");
    
    Temperature temp_c = 25;
    Temperature temp_f = celsius_to_fahrenheit(temp_c);
    
    println("温度変換: %d°C = %d°F", temp_c, temp_f);
    
    Distance x1 = 10;
    Distance y1 = 20;  
    Distance x2 = 35;
    Distance y2 = 50;
    
    Distance dist = calculate_distance(x1, y1, x2, y2);
    println("距離計算: 点1(%d, %d) から 点2(%d, %d) まで = %d (マンハッタン距離)", x1, y1, x2, y2, dist);
    println();
    
    // ========== Section 3: Product Management with Typedef ==========
    println("3. Product Management with Typedef:");
    
    ProductId id1 = 1001;
    ProductName name1 = "ノートPC";
    Quantity qty1 = 5;
    Price price1 = 80000;
    
    ProductId id2 = 1002;
    ProductName name2 = "マウス";
    Quantity qty2 = 20;
    Price price2 = 2500;
    
    ProductId id3 = 1003;
    ProductName name3 = "キーボード";
    Quantity qty3 = 8;
    Price price3 = 5000;
    
    println("商品管理システム - 在庫一覧:");
    println("ID: %d, 商品: %s, 在庫: %d, 単価: ¥%d", id1, name1, qty1, price1);
    println("ID: %d, 商品: %s, 在庫: %d, 単価: ¥%d", id2, name2, qty2, price2);
    println("ID: %d, 商品: %s, 在庫: %d, 単価: ¥%d", id3, name3, qty3, price3);
    
    Price total_value = (qty1 * price1) + (qty2 * price2) + (qty3 * price3);
    println("総在庫価値: ¥%d", total_value);
    println();
    
    // ========== Section 4: Type Safety Demonstration ==========
    println("4. Type Safety Demonstration:");
    
    Age person_age = 25;
    Score test_score = 85;
    Temperature room_temp = 22;
    Distance travel_dist = 100;
    
    println("型安全性デモ - 年齢: %d, テスト点数: %d, 室温: %d度, 距離: %dkm", 
            person_age, test_score, room_temp, travel_dist);
    
    Age retirement_age = 65;
    Age years_to_retirement = retirement_age - person_age;
    println("退職まで: %d年", years_to_retirement);
    println();
    
    // ========== Section 5: Payroll Calculation with Typedef ==========
    println("5. Payroll Calculation with Typedef:");
    
    HourlyRate base_rate = 1500;
    WorkHours regular_hours = 40;
    WorkHours overtime_hours = 10;
    HourlyRate overtime_rate = base_rate + (base_rate / 2); // 1.5x rate
    
    Salary regular_pay = regular_hours * base_rate;
    Salary overtime_pay = overtime_hours * overtime_rate;
    Salary total_salary = regular_pay + overtime_pay;
    
    println("給与計算 - 基本時給: ¥%d, 通常労働: %d時間", base_rate, regular_hours);
    println("残業時給: ¥%d, 残業時間: %d時間", overtime_rate, overtime_hours);
    println("総給与: ¥%d (通常¥%d + 残業¥%d)", total_salary, regular_pay, overtime_pay);
    
    println();
    println("=== Typedef Demo Complete ===");
    
    return 0;
}
