// 構造体の値型メンバーと前方宣言の実用例

// 前方宣言
struct Address;
struct Contact;

// 人物情報
struct Person {
    int id;
    Address address;    // 値型メンバー（循環なし）
    Contact* contacts;  // ポインタ（配列として使用）
};

// 住所情報
struct Address {
    int zip_code;
    int building_number;
};

// 連絡先情報
struct Contact {
    int type;  // 1=email, 2=phone
    Person* related_person;  // 関連する人物へのポインタ
};

void print_person(Person& p) {
    println("Person ID: %d", p.id);
    println("  Zip Code: %d", p.address.zip_code);
    println("  Building: %d", p.address.building_number);
}

void main() {
    println("=== Struct Value Member with Forward Declaration ===\n");
    
    // 住所を作成
    Address addr1;
    addr1.zip_code = 1234567;
    addr1.building_number = 42;
    
    Address addr2;
    addr2.zip_code = 7654321;
    addr2.building_number = 99;
    
    // 人物を作成
    Person person1;
    person1.id = 1001;
    person1.address = addr1;
    
    Person person2;
    person2.id = 1002;
    person2.address = addr2;
    
    // 連絡先を作成
    Contact contact1;
    contact1.type = 1;  // email
    contact1.related_person = &person2;
    
    Contact contact2;
    contact2.type = 2;  // phone
    contact2.related_person = &person1;
    
    person1.contacts = &contact1;
    person2.contacts = &contact2;
    
    // 情報を表示
    println("=== Person 1 ===");
    print_person(person1);
    
    if (person1.contacts != nullptr) {
        Contact* c = person1.contacts;
        println("  Contact Type: %d", (*c).type);
        
        if ((*c).related_person != nullptr) {
            Person* related = (*c).related_person;
            println("  Related Person ID: %d", (*related).id);
        }
    }
    
    println("\n=== Person 2 ===");
    print_person(person2);
    
    if (person2.contacts != nullptr) {
        Contact* c = person2.contacts;
        println("  Contact Type: %d", (*c).type);
        
        if ((*c).related_person != nullptr) {
            Person* related = (*c).related_person;
            println("  Related Person ID: %d", (*related).id);
        }
    }
    
    println("\n=== Test Completed Successfully ===");
    println("Value members with forward declarations work correctly!");
}
