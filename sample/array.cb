// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 配列とポインタの総合デモンストレーション
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

// 学生情報を表す構造体
struct Student {
    int id;
    int score;
    string name;
};

// 変換関数の型
typedef int (*TransformFunc)(int);

// ===== 配列変換関数群 =====

int double_value(int x) {
    return x * 2;
}

int triple_value(int x) {
    return x * 3;
}

int square_value(int x) {
    return x * x;
}

int mod_ten(int x) {
    return x % 10;
}

// ===== 配列処理関数群 =====

// ポインタを使って配列の合計を計算
int sum_array(int* arr, int size) {
    int sum = 0;
    
    for (int i = 0; i < size; i++) {
        int* ptr = arr + i;
        sum = sum + *ptr;
    }
    
    return sum;
}

// ポインタを使って配列の最大値を見つける
int find_max(int* arr, int size) {
    if (size == 0) return 0;
    
    int max_val = *arr;
    
    for (int i = 1; i < size; i++) {
        int* ptr = arr + i;
        if (*ptr > max_val) {
            max_val = *ptr;
        }
    }
    
    return max_val;
}

// 関数ポインタを使って配列の各要素を変換
void transform_array(int* arr, int size, TransformFunc func) {
    for (int i = 0; i < size; i++) {
        int* ptr = arr + i;
        *ptr = func(*ptr);
    }
}

// 配列を表示する
void print_array(int* arr, int size) {
    print("  [");
    
    for (int i = 0; i < size; i++) {
        int* ptr = arr + i;
        print(*ptr);
        if (i < size - 1) print(", ");
    }
    println("]");
}

// 配列をソート（バブルソート）
void bubble_sort(int* arr, int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            int* ptr1 = arr + j;
            int* ptr2 = arr + j + 1;
            
            if (*ptr1 > *ptr2) {
                int temp = *ptr1;
                *ptr1 = *ptr2;
                *ptr2 = temp;
            }
        }
    }
}

// ===== 学生データ処理関数 =====

void print_student(Student& s) {
    println("  ID: %d, Name: %s, Score: %d", s.id, s.name, s.score);
}

// 最高得点の学生のインデックスを返す（ポインタ使用版）
int find_top_student_with_ptr(int* arr, int count) {
    if (count == 0) return 0;
    
    int top_index = 0;
    int max_score = *(arr + 0);
    
    for (int i = 1; i < count; i++) {
        int* ptr = arr + i;
        if (*ptr > max_score) {
            max_score = *ptr;
            top_index = i;
        }
    }
    
    return top_index;
}

// 平均点を計算（ポインタ使用版）
int calculate_average_with_ptr(int* arr, int count) {
    int total = 0;
    
    for (int i = 0; i < count; i++) {
        int* ptr = arr + i;
        total = total + *ptr;
    }
    
    return total / count;
}

// ===== メイン関数 =====

void main() {
    println("=== Array and Pointer Comprehensive Demo ===\n");
    
    // 1. ポインタによる配列操作
    println("=== 1. Pointer-based Array Operations ===");
    int[6] numbers = [10, 25, 7, 33, 42, 18];
    
    println("Original array:");
    print_array(&numbers[0], 6);
    
    int sum = sum_array(&numbers[0], 6);
    int max_val = find_max(&numbers[0], 6);
    
    println("Sum: %d", sum);
    println("Max: %d", max_val);
    
    // 2. 関数ポインタによる配列変換
    println("\n=== 2. Function Pointers for Array Transformation ===");
    
    // Double変換
    int[4] test1 = [2, 5, 8, 10];
    println("\nTransform: Double");
    print("Before:");
    print_array(&test1[0], 4);
    transform_array(&test1[0], 4, &double_value);
    print("After: ");
    print_array(&test1[0], 4);
    
    // Triple変換
    int[4] test2 = [2, 5, 8, 10];
    println("\nTransform: Triple");
    print("Before:");
    print_array(&test2[0], 4);
    transform_array(&test2[0], 4, &triple_value);
    print("After: ");
    print_array(&test2[0], 4);
    
    // Square変換
    int[4] test3 = [2, 5, 8, 10];
    println("\nTransform: Square");
    print("Before:");
    print_array(&test3[0], 4);
    transform_array(&test3[0], 4, &square_value);
    print("After: ");
    print_array(&test3[0], 4);
    
    // 3. 複数配列のポインタ処理
    println("\n=== 3. Multiple Arrays with Pointers ===");
    
    int[5] data1 = [1, 2, 3, 4, 5];
    int[5] data2 = [10, 20, 30, 40, 50];
    int[5] data3 = [100, 200, 300, 400, 500];
    
    println("Processing three arrays:");
    println("Array 1:");
    print("  Data: ");
    print_array(&data1[0], 5);
    println("  Sum: %d", sum_array(&data1[0], 5));
    
    println("Array 2:");
    print("  Data: ");
    print_array(&data2[0], 5);
    println("  Sum: %d", sum_array(&data2[0], 5));
    
    println("Array 3:");
    print("  Data: ");
    print_array(&data3[0], 5);
    println("  Sum: %d", sum_array(&data3[0], 5));
    
    // 4. 構造体配列とポインタ操作
    println("\n=== 4. Struct Arrays with Pointer Operations ===");
    
    Student[5] students;
    
    students[0].id = 101;
    students[0].score = 85;
    students[0].name = "Alice";
    
    students[1].id = 102;
    students[1].score = 92;
    students[1].name = "Bob";
    
    students[2].id = 103;
    students[2].score = 78;
    students[2].name = "Carol";
    
    students[3].id = 104;
    students[3].score = 95;
    students[3].name = "Dave";
    
    students[4].id = 105;
    students[4].score = 88;
    students[4].name = "Eve";
    
    println("Student List:");
    for (int i = 0; i < 5; i++) {
        println("  ID: %d, Name: %s, Score: %d", students[i].id, students[i].name, students[i].score);
    }
    
    // 得点配列を抽出してポインタで処理
    int[5] scores;
    for (int i = 0; i < 5; i++) {
        scores[i] = students[i].score;
    }
    
    int top_index = find_top_student_with_ptr(&scores[0], 5);
    println("\nTop Student (found using pointer):");
    println("  ID: %d, Name: %s, Score: %d", students[top_index].id, students[top_index].name, students[top_index].score);
    
    int avg = calculate_average_with_ptr(&scores[0], 5);
    println("\nAverage Score: %d", avg);
    
    // 5. コールバック関数による配列処理
    println("\n=== 5. Callback Functions for Array Processing ===");
    
    int[8] values = [64, 23, 89, 12, 45, 78, 34, 91];
    
    println("Original values:");
    print_array(&values[0], 8);
    
    println("\nSorting with bubble sort...");
    bubble_sort(&values[0], 8);
    
    println("Sorted values:");
    print_array(&values[0], 8);
    
    // 6. 複雑なポインタ操作
    println("\n=== 6. Advanced Pointer Operations ===");
    
    int[3][4] matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];
    
    println("2D Matrix:");
    for (int i = 0; i < 3; i++) {
        print("  Row %d: [", i);
        for (int j = 0; j < 4; j++) {
            print(matrix[i][j]);
            if (j < 3) print(", ");
        }
        println("]");
    }
    
    println("\nRow sums:");
    for (int i = 0; i < 3; i++) {
        int row_sum = 0;
        for (int j = 0; j < 4; j++) {
            row_sum = row_sum + matrix[i][j];
        }
        println("  Row %d sum: %d", i, row_sum);
    }
    
    // 統計情報
    println("\n=== Implementation Statistics ===");
    println("Techniques demonstrated:");
    println("  - Pointer arithmetic for array traversal");
    println("  - Function pointers for transformations");
    println("  - Multiple array management with pointers");
    println("  - Struct arrays with pointer-based processing");
    println("  - Callback functions for sorting");
    println("  - 2D array iteration and processing");
    println("\nPointer features used:");
    println("  - Address-of operator (&)");
    println("  - Dereference operator (*)");
    println("  - Pointer arithmetic (ptr + i)");
    println("  - Function pointers and callbacks");
}
